#!/usr/bin/make -f
#
# Generally nothing needs to be modified below this line
#
SHELL    := sh -e
DEB_HOST_ARCH  := $(shell dpkg-architecture -qDEB_HOST_ARCH)
DEB_BUILD_ARCH := $(shell dpkg-architecture -qDEB_BUILD_ARCH)
srcver   := $(shell dpkg-parsechangelog | awk '/^Version:/ {print $$2}')
VERSION  := $(shell echo $(srcver) | sed -e 's,-[^-]*$$,,')
MAJOR    := $(word 1,$(subst ., ,$(VERSION))).$(word 2,$(subst ., ,$(VERSION)))

include debian/rules.defs

source: debian/control $(STAMPS_DIR)/source-base
$(STAMPS_DIR)/source-base: $(BUILD_DIR) $(STAMPS_DIR)
	dh_testdir
	$(MAKE) -f debian/rules.gen source-$(DEB_HOST_ARCH)
	touch $@

source-all: debian/control $(BUILD_DIR) $(STAMPS_DIR)
	dh_testdir
	$(MAKE) -f debian/rules.gen source

setup: debian/control $(STAMPS_DIR)/setup-base
$(STAMPS_DIR)/setup-base: $(BUILD_DIR) $(STAMPS_DIR) $(STAMPS_DIR)/source-base
	dh_testdir
	$(MAKE) -f debian/rules.gen setup-$(DEB_HOST_ARCH)
	touch $@

build: debian/control $(STAMPS_DIR)/build-base
$(STAMPS_DIR)/build-base: $(BUILD_DIR) $(STAMPS_DIR) $(STAMPS_DIR)/setup-base
	dh_testdir
	$(MAKE) -f debian/rules.gen build-$(DEB_HOST_ARCH)
	touch $@

$(BUILD_DIR) $(STAMPS_DIR):
	@[ -d $@ ] || mkdir $@

DIR_ORIG = ../orig/linux-$(MAJOR)-$(VERSION)
TAR_ORIG = ../linux-$(MAJOR)_$(VERSION).orig.tar.gz

orig: $(DIR_ORIG)
	rsync --delete --exclude debian --exclude .svn --link-dest=$(DIR_ORIG)/ -a $(DIR_ORIG)/ .

$(DIR_ORIG):
	if [ -f $(TAR_ORIG) ]; then \
		mkdir -p ../orig; \
		tar -C ../orig -xzf $(TAR_ORIG); \
	else \
		echo "Can't find orig tarball." >&2; \
		exit 1; \
	fi

maintainerclean:
	-rm debian/control debian/control.md5sum debian/rules.gen
	rm -rf $(filter-out debian .svn, $(wildcard * .[^.]*))

clean: debian/control
	dh_testdir
	rm -rf $(BUILD_DIR) $(STAMPS_DIR) debian/lib/python/debian_linux/*.pyc
	dh_clean

binary-indep:
	dh_testdir
	$(MAKE) -f debian/rules.gen binary-indep

binary-arch:
	dh_testdir
	$(MAKE) -f debian/rules.gen binary-arch-$(DEB_HOST_ARCH)

binary:	binary-indep binary-arch

#
# Makes the master debian/control file by substituting
# variable values into the template.
#
CONTROL_FILES = debian/changelog $(wildcard debian/templates/control.*) 
CONTROL_FILES += debian/arch/defines $(wildcard debian/arch/*/defines) $(wildcard debian/arch/*/*/defines)
debian/control debian/rules.gen: debian/bin/gencontrol.py $(CONTROL_FILES)
	if [ -f debian/control.md5sum ]; then \
		if md5sum $^ | diff - debian/control.md5sum > /dev/null; then true; else \
			$(MAKE) -f debian/rules debian/control-real; \
		fi \
	else \
		$(MAKE) -f debian/rules debian/control-real; \
	fi

debian/control-real: debian/bin/gencontrol.py $(CONTROL_FILES)
	chmod +x $<
	$<
	md5sum $^ > debian/control.md5sum
	@echo
	@echo This target is made to fail intentionally, to make sure
	@echo that it is NEVER run during the automated build. Please
	@echo ignore the following error, the debian/control file has
	@echo been generated SUCCESSFULLY.
	@echo
	exit 1

#
# Rule to check all configs snipplets in debian/arch
#

CheckConfs_DIR := $(BUILD_DIR)/check

$(CheckConfs_DIR) source-configs: debian/control $(BUILD_DIR) $(STAMPS_DIR)
	$(MAKE) -f debian/rules.gen setup-$(DEB_HOST_ARCH)-real
	rm -rf '$(CheckConfs_DIR)'
	cp -al $(BUILD_DIR)/source $(CheckConfs_DIR)

check-configs: $(CheckConfs_DIR)
	@echo "Checking all configuration files"
	ocaml debian/bin/kconfig.ml -c -b "debian/arch"

clean-configs:
	rm -rf '$(CheckConfs_DIR)'

.PHONY: clean build setup binary-indep binary-arch binary
