From: Ben Hutchings <ben@decadent.org.uk>
Date: Sun, 28 Jun 2009 15:51:07 +0100
Subject: [PATCH] rt2860/2870/3070: use the firmware loader interface and library CRC code

Based on work by Darren Salt <linux@youmustbejoking.demon.co.uk>.

--- a/drivers/staging/rt2860/Kconfig
+++ b/drivers/staging/rt2860/Kconfig
@@ -1,6 +1,7 @@
 config RT2860
 	tristate "Ralink 2860 wireless support"
-	depends on BROKEN
 	depends on PCI && X86 && WLAN_80211
+	select CRC_CCITT
+	select FW_LOADER
 	---help---
 	  This is an experimental driver for the Ralink 2860 wireless chip.
--- a/drivers/staging/rt2860/common/rtmp_init.c
+++ b/drivers/staging/rt2860/common/rtmp_init.c
@@ -38,14 +38,8 @@
     Jan Lee  2006-09-15    RT2860. Change for 802.11n , EEPROM, Led, BA, HT.
 */
 #include "../rt_config.h"
-#ifdef RT2860
-#include "firmware.h"
-#include <linux/bitrev.h>
-#endif
-#ifdef RT2870
-/* New firmware handles both RT2870 and RT3070. */
-#include "../../rt3070/firmware.h"
-#endif
+#include <linux/firmware.h>
+#include <linux/crc-ccitt.h>
 
 UCHAR    BIT8[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
 ULONG    BIT32[] = {0x00000001, 0x00000002, 0x00000004, 0x00000008,
@@ -243,12 +180,14 @@ RTMP_REG_PAIR	STAMACRegTable[] =	{
 // RT2870 Firmware Spec only used 1 oct for version expression
 //
 #define FIRMWARE_MINOR_VERSION	7
-
+#define FW_FILENAME_V1 "rt2870.bin"
+#define FW_FILENAME_V2 "rt3071.bin"
+MODULE_FIRMWARE(FW_FILENAME_V1);
+MODULE_FIRMWARE(FW_FILENAME_V2);
 #endif // RT2870 //
 
 // New 8k byte firmware size for RT3071/RT3072
 #define FIRMWAREIMAGE_MAX_LENGTH	0x2000
-#define FIRMWAREIMAGE_LENGTH		(sizeof (FirmwareImage) / sizeof(UCHAR))
 #define FIRMWARE_MAJOR_VERSION	0
 
 #define FIRMWAREIMAGEV1_LENGTH	0x1000
@@ -256,6 +195,8 @@ RTMP_REG_PAIR	STAMACRegTable[] =	{
 
 #ifdef RT2860
 #define FIRMWARE_MINOR_VERSION	2
+#define FW_FILENAME "rt2860.bin"
+MODULE_FIRMWARE(FW_FILENAME);
 #endif
 
 
@@ -3314,45 +3255,65 @@ NDIS_STATUS NICLoadFirmware(
 	IN PRTMP_ADAPTER pAd)
 {
 	NDIS_STATUS		Status = NDIS_STATUS_SUCCESS;
-	PUCHAR			pFirmwareImage;
 	ULONG			FileLength, Index;
-	//ULONG			firm;
 	UINT32			MacReg = 0;
 #ifdef RT2870
 	UINT32			Version = (pAd->MACVersion >> 16);
 #endif // RT2870 //
+	struct device		*dev;
+	const struct firmware	*fw = NULL;
+	const char		*name;
+	int			err;
 
-	pFirmwareImage = FirmwareImage;
-	FileLength = sizeof(FirmwareImage);
+#ifdef RT2860
+	dev = &((POS_COOKIE)pAd->OS_Cookie)->pci_dev->dev;
+	name = FW_FILENAME;
+	FileLength = MAX_FIRMWARE_IMAGE_SIZE;
+#endif
 #ifdef RT2870
-	// New 8k byte firmware size for RT3071/RT3072
-	//printk("Usb Chip\n");
-	if (FIRMWAREIMAGE_LENGTH == FIRMWAREIMAGE_MAX_LENGTH)
-	//The firmware image consists of two parts. One is the origianl and the other is the new.
-	//Use Second Part
-	{
-		if ((Version != 0x2860) && (Version != 0x2872) && (Version != 0x3070))
-		{	// Use Firmware V2.
-			//printk("KH:Use New Version,part2\n");
-			pFirmwareImage = (PUCHAR)&FirmwareImage[FIRMWAREIMAGEV1_LENGTH];
-			FileLength = FIRMWAREIMAGEV2_LENGTH;
-		}
-		else
-		{
-			//printk("KH:Use New Version,part1\n");
-			pFirmwareImage = FirmwareImage;
-			FileLength = FIRMWAREIMAGEV1_LENGTH;
-		}
+	dev = &((POS_COOKIE)pAd->OS_Cookie)->pUsb_Dev->dev;
+	if (Version == 0x2860 || Version == 0x2872 || Version == 0x3070) {
+		name = FW_FILENAME_V1;
+		FileLength = FIRMWAREIMAGEV1_LENGTH;
+	} else {
+		name = FW_FILENAME_V2;
+		FileLength = FIRMWAREIMAGEV2_LENGTH;
 	}
-	else
-	{
-		DBGPRINT(RT_DEBUG_ERROR, ("KH: bin file should be 8KB.\n"));
-		Status = NDIS_STATUS_FAILURE;
+#endif
+
+	err = request_firmware(&fw, name, dev);
+	if (err) {
+		dev_err(dev, "firmware file %s request failed (%d)\n",
+			name, err);
+		goto fail;
 	}
 
-#endif // RT2870 //
+	if (fw->size != FileLength) {
+		dev_err(dev, "firmware file %s size is wrong\n", name);
+		goto fail;
+	}
 
-	RT28XX_WRITE_FIRMWARE(pAd, pFirmwareImage, FileLength);
+	/* is it new enough? */
+	pAd->FirmwareVersion = (fw->data[fw->size - 4] << 8 |
+				fw->data[fw->size - 3]);
+
+	if (pAd->FirmwareVersion <
+	    (FIRMWARE_MAJOR_VERSION << 8 | FIRMWARE_MINOR_VERSION)) {
+		dev_err(dev, "rt28x0sta: firmware file %s is too old\n",
+		       name);
+		goto fail;
+	}
+
+	/* is the internal CRC correct? */
+	if (crc_ccitt(0xffff, fw->data, fw->size - 2) !=
+	    (fw->data[fw->size - 2] | (fw->data[fw->size - 1] << 8))) {
+		dev_err(dev, "firmware file %s failed internal CRC\n", name);
+		goto fail;
+	}
+
+	RT28XX_WRITE_FIRMWARE(pAd, fw->data, fw->size);
+
+	release_firmware(fw);
 
 	/* check if MCU is ready */
 	Index = 0;
@@ -3372,9 +3335,15 @@ NDIS_STATUS NICLoadFirmware(
 		DBGPRINT(RT_DEBUG_ERROR, ("NICLoadFirmware: MCU is not ready\n\n\n"));
 	} /* End of if */
 
+out:
     DBGPRINT(RT_DEBUG_TRACE,
 			 ("<=== %s (status=%d)\n", __func__, Status));
     return Status;
+
+fail:
+	release_firmware(fw);
+	Status = NDIS_STATUS_FAILURE;
+	goto out;
 } /* End of NICLoadFirmware */
 
 
--- a/drivers/staging/rt2870/Kconfig
+++ b/drivers/staging/rt2870/Kconfig
@@ -1,7 +1,8 @@
 config RT2870
 	tristate "Ralink 2870/3070 wireless support"
-	depends on BROKEN
 	depends on USB && X86 && WLAN_80211
+	select CRC_CCITT
+	select FW_LOADER
 	---help---
 	  This is an experimental driver for the Ralink xx70 wireless chips.
 
--- a/drivers/staging/rt3090/Kconfig
+++ b/drivers/staging/rt3090/Kconfig
@@ -1,7 +1,8 @@
 config RT3090
 	tristate "Ralink 3090 wireless support"
-	depends on BROKEN
 	depends on PCI && X86 && WLAN_80211
+	select CRC_CCITT
+	select FW_LOADER
 	---help---
 	  This is an experimental driver for the Ralink 3090 wireless chip.
 
