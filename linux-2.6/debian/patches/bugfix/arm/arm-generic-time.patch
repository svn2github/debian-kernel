Backported from 2.6.19-rc3, needed for ixp4xx-clocksource.patch

Index: linux-2.6.18/arch/arm/Kconfig
===================================================================
--- linux-2.6.18.orig/arch/arm/Kconfig	2006-09-19 20:42:06.000000000 -0700
+++ linux-2.6.18/arch/arm/Kconfig	2006-10-29 01:59:14.000000000 -0700
@@ -17,6 +17,10 @@
 	  Europe.  There is an ARM Linux project with a web page at
 	  <http://www.arm.linux.org.uk/>.
 
+config GENERIC_TIME
+	bool
+	default n
+
 config MMU
 	bool
 	default y
Index: linux-2.6.18/arch/arm/kernel/time.c
===================================================================
--- linux-2.6.18.orig/arch/arm/kernel/time.c	2006-09-19 20:42:06.000000000 -0700
+++ linux-2.6.18/arch/arm/kernel/time.c	2006-10-29 01:59:14.000000000 -0700
@@ -69,10 +69,12 @@
  */
 int (*set_rtc)(void);
 
+#ifndef CONFIG_GENERIC_TIME
 static unsigned long dummy_gettimeoffset(void)
 {
 	return 0;
 }
+#endif
 
 /*
  * Scheduler clock - returns current time in nanosec units.
@@ -230,6 +232,7 @@
 #define	do_leds()
 #endif
 
+#ifndef CONFIG_GENERIC_TIME
 void do_gettimeofday(struct timeval *tv)
 {
 	unsigned long flags;
@@ -291,6 +294,7 @@
 }
 
 EXPORT_SYMBOL(do_settimeofday);
+#endif /* !CONFIG_GENERIC_TIME */
 
 /**
  * save_time_delta - Save the offset between system time and RTC time
@@ -500,8 +504,10 @@
 
 void __init time_init(void)
 {
+#ifndef CONFIG_GENERIC_TIME
 	if (system_timer->offset == NULL)
 		system_timer->offset = dummy_gettimeoffset;
+#endif
 	system_timer->init();
 
 #ifdef CONFIG_NO_IDLE_HZ
Index: linux-2.6.18/include/asm-arm/mach/time.h
===================================================================
--- linux-2.6.18.orig/include/asm-arm/mach/time.h	2006-09-19 20:42:06.000000000 -0700
+++ linux-2.6.18/include/asm-arm/mach/time.h	2006-10-29 01:59:14.000000000 -0700
@@ -38,7 +38,9 @@
 	void			(*init)(void);
 	void			(*suspend)(void);
 	void			(*resume)(void);
+#ifndef CONFIG_GENERIC_TIME
 	unsigned long		(*offset)(void);
+#endif
 
 #ifdef CONFIG_NO_IDLE_HZ
 	struct dyn_tick_timer	*dyn_tick;
