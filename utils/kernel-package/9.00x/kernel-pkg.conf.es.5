.\" Hey, Emacs! This is an -*- nroff -*- source file.
.\" Copyright (c) 1997 Manoj Srivastava <srivasta@debian.org>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\" $Id: kernel-pkg.conf.es.5,v 1.3 2003/08/08 19:13:57 srivasta Exp $
.\"

.\" (c) 2003 Software in the Public Interest
.\" Esta traducción ha sido realizada por Rubén Porras <nahoo@inicia.es>
.\" Está basada en la página de manual original:
.\" versión 1.9 del CVS de /cvs/debian-doc/manpages/english/kernel-package/
.\" Revisada por Rudy Godoy <rudy@kernel-panik.org>

.TH KERNEL\-PKG.CONF 5 "7 de junio de 1997" "Debian" "manual Debian GNU/Linux" 
.\" NAME should be all caps, SECTION should be 1-8, maybe w/ subsection
.\" other parms are allowed: see man(7), man(1)
.SH NOMBRE
kernel\-pkg.conf \- fichero de configuración global del sistema para make\-kpkg
.SH SINOPSIS
.I /etc/kernel\-pkg.conf
o
.I ~/.kernel\-pkg.conf
.SH "DESCRIPCIÓN"
El fichero 
.I /etc/kernel\-pkg.conf
o
.I ~/.kernel\-pkg.conf
actualmente es un pequeño
.BR Makefile
incluido durante el proceso de construcción del núcleo, debido a esto puede
poner cualquier cosa permitida en este tipo de ficheros (simplemente esté muy
seguro acerca de lo que hace). Si existe la configuración de usuario
.I ~/.kernel\-pkg.conf
, se usa en favor del fichero de configuración global
.I /etc/kernel\-pkg.conf.
.PP
Todas las variables tienen valores razonables de forma predeterminada, pueden
ser modificadas para una ejecución o para un caso en concreto usando variables
de entorno. Algunas de las variables pueden ser modificadas con opciones de
.B make\-kpkg.
.PP
En este momento, las variables modificables por el usuario son:
.TP
.B maintainer
Encargado del paquete local kernel\-*. Establecido en la instalación por
.IR postinst.
Puede ser modificado mediante la variable de entorno
.B KPKG_MAINTAINER.
Dese cuenta que cualquier apostrofe "'" debe de ser entrecomillado del siguiente
modo:
maintainer = John O'\\''Brien. Si, es feo pero funciona.
.TP
.B email      
La dirección de correo electrónico del encargado. Establecido en la instalación
por
.IR postinst.
Puede ser modificado mediante la variable de entorno
.B KPKG_EMAIL.
.TP
.B pgp           
Nombre a buscar en la base de datos pgp 
.BI si
construimos módulos separados (como pcmcia) en
.IR /usr/src/modules/.
Puede ser modificado mediante la variable de entorno
.B PGP_SIGNATURE, 
o (de nuevo) por la opción 
.IR \-\-pgpsign
de
.B make\-kpkg.
Por omisión es 
.I maintainer.
(Opcional)
.TP
.B debian         
La revisión de Debian del paquete con el núcleo. Puede ser modificado mediante
la variable de entorno
.B DEBIAN_REVISION, 
o (de nuevo) por la opción 
.IR \-\-revision
de
.B make\-kpkg.
Por omisión es 
.I 10.0.0.Custom
(Opcional)
.TP
.B debian_revision_mandatory
Normalmente sin definir. Si ésta o la variable de entorno
.B DEBIAN_REVISION_MANDATORY
están establecidas, entonces, la falta de una revisión de Debian causa un error (y
.B make\-kpkg
no proporcionará un valor por omisión de 10.0.0.Custom)
.TP
.B link_in_boot
Póngalo a True si quiere el enlace simbólico a la imagen del núcleo, llamado
.I vmlinuz 
en 
.I /boot 
en vez de en el sitio predeterminado 
.I /.  
Puede ser modificado mediante la variable de entorno
.B LINK_IN_BOOT. 
Por omisión está indeterminado.
(Opcional)
.TP
.B kimage         
El tipo de imagen del núcleo (e.g. zImage o bzImage). Puede ser modificado
mediante la variable de entorno
.B IMAGE_TYPE,  
o (de nuevo) por las opciones
.IR \-\-zimage
o
.IR \-\-bzimage
de
.B make\-kpkg.
Por omisión es 
.I bzImage.
(Opcional)
.TP
.B no_symlinks
Determina si se usan o no enlaces al fichero con la 
.I imagen.
Puede ser modificado mediante la variable de entorno
.B NO_SYMLINK
Mutuamente excluyente con
.I reverse_symlinks. 
Puede usarse con
.I link_in_boot. 
La imagen se coloca en vmlinuz (en vez de en /boot/vmlinuz\-X.X.XX). El vmlinuz
anterior se mueve a vmlinuz.old incondicionalmente. (Normalmente, sólo se hace
si la versión de la nueva imagen difiere de la anterior). Esto le restringe a
dos imágenes, a menos que usted tome medidas adicionales y guarde copias de
imágenes anteriores. Esto es para aquellos que tienen
.I /boot
en un sistema que no usa los enlaces simbólicos (y digamos, que usan loadlin
como gestor de arranque). Esto es una chapuza.
Por omisión está indefinido (opcional)
.TP
.B reverse_symlinks
Determina si se usan enlaces simbólicos invertidos (esto es, el fichero real es
el que no tiene número de versión, la versión numerada es el enlace) al fichero
con la
.I imagen.
Puede ser modificado mediante la variable de entorno
.B REVERSE_SYMLINK
Mutuamente excluyente con
.I no_symlinks.
Se puede usar junto con
.I link_in_boot.
Igual que
.I no_symlinks, 
excepto porque /boot/vmlinuz\-X.XX es enlazado con la nueva imagen real,
vmlinuz. Esto también le restringe a dos imágenes a menos que tome alguna acción
adicional. Los enlaces anteriores quedan colgando. Esto es para aquellos con
.I /boot
en umsdos, y no pueden ver el enlace en dos, pero quieren saber el número de la
versión cuando estén en Linux. Esto es una chapuza.
Por omisión está sin definir. (opcional)
.TP
.B patch_the_kernel
Esta variable es sólo para expertos. Si es YES (la variable de entorno 
.B PATCH_THE_KERNEL 
lo modifica), el proceso de construcción hace que se ejecute sobre
.I /usr/src/kernel\-patches/$(architecture)/apply 
y (afortunadamente) deshaga el proceso durante la fase de limpieza ejecutando
run\-parts sobre 
.I /usr/src/kernel\-patches/$(architecture)/unpatch. 
La arquitectura especial all se usa para parches independientes de la arquitectura.
.TP
.B config_target
Define el tipo de configuración a usar. Por omisión es oldconfig, lo que está
bien para configuraciones no interactivas (o mínimamente interactivas). Si está
poniendo patch_the_kernel a YES y algunos de los parches cambian la
configuración disponible, entonces es posible que desee poner esto a otro valor
(como menuconfig o xconfig).
(La variable de entorno
.B CONFIG_TARGET
modifica éste valor de configuración).
Si el valor de config_target es otro distinto de config, oldconfig,
menuconfig o xconfig se vuelve a poner a oldconfig.
.TP
.B use_saved_config
Ésta variable es sólo para expertos. Si es NO (la variable de entorno 
.B USE_SAVED_CONFIG
lo modifica), el fichero .config.save en el directorio principal es ignorado. 
.TP
.B root_cmd 
Esta variable que se pasa a
.B dpkg\-buildpackage
en el objetivo
.I buildpackage.
Establece el modo de ganar permisos de superusuario (por ejemplo, 
.I `sudo'
o
.I`fakeroot')
que 
.B dpkg\-buildpackages' 
necesita usando la opción \-r. La variable de entorno 
.B ROOT_CMD
lo modifica. Use la variable de entorno
.B UNSIGN_SOURCE
para pasar una opción a dpkg\-buildpackage para que éste no firme las fuentes,
del mismo modo, use la variable de entorno
.B UNSIGN_CHANGELOG 
para pasar una opción a dpkg\-buildpackage para que no firme el fichero de
cambios. De nuevo, esta variable sólo es útil para el objetivo
.I buildpackage. 
Establezca la variable de entorno
.B ROOT_CMD
si sólo desea construir la imagen del núcleo, por ejemplo.
.TP
.B delete_build_link
Si es  YES, el enlace simbólico a 
.I /lib/modules/$VERSION/build
será eliminado del paquete .deb resultante. La variable de entorno
.B DELETE_BUILD_LINK
lo modifica. 
.TP
.B do_clean	
Si es cualquier cosa menos YES, evita que se haga un make clean en el árbol de
fuentes del núcleo después de construir el paquete con la imagen. La variable de
entorno 
.B CLEAN_SOURCE
lo modifica.
.TP
.B install_vmlinux
Si es YES instalará la imagen ELF del núcleo descomprimida junto con la imagen
arrancable y comprimida (vmlinuz). Esta imagen es necesaria para medir el
rendimiento del núcleo y usar userspace con oprofile (oprofile.sourceforge.net,
sólo i386).
.TP
.B image_clean_hook
Si apunta a un ejecutable, éste será ejecutado desde el directorio principal con
la imagen (temporal) del núcleo antes de que sea empaquetada. Sólo tiene efecto
sobre la imagen que se esté empaquetando \-\- si el opera en el directorio
actual y sus subdirectorios, los directorios originales con las fuentes deben
permanecer intactos. De esta forma se facilitan los pequeños retoques a la
imagen del núcleo que ese esté empaquetando.
.TP
.B source_clean_hook
Si apunta a un ejecutable, éste será ejecutado desde el directorio principal de
las fuentes (temporales) del núcleo antes de que sean empaquetadas,
.I ./debian/tmp\-source/usr/src/kernel\-source\-X.X.XX.
No tiene efecto sobre otra cosa que no sean las fuentes empaquetadas -- si el
script opera en el directorio actual y sus descendientes, el árbol de
directorios con el código fuente original no se verá modificado. Esto ayuda a
moldear las fuentes empaquetadas (por ejemplo, eliminar directorios de control
de versiones, o eliminar arquitecturas).
.TP 
.B header_clean_hook
Si apunta a un ejecutable, este será ejecutado desde el directorio principal de
las cabeceras del núcleo antes de que sean empaquetadas. No tiene efecto sobre
otra cosa que no sean las fuentes empaquetadas -- si el script opera en el
directorio actual y sus descendientes, el árbol de directorios con el código
fuente original no se verá modificado. Esto ayuda a moldear las fuentes
empaquetadas (por ejemplo, eliminar directorios de control de versiones, o
eliminar arquitecturas).
.TP 
.B doc_clean_hook
Si apunta a un ejecutable, este será ejecutado desde el directorio principal de
la documentación del núcleo antes de que sea empaquetada. No tiene efecto sobre
otra cosa que no sea la documentación empaquetada -- si el script opera en el
directorio actual y sus descendientes, el árbol de directorios con el código
fuente original no se verá modificado. Esto ayuda a moldear las fuentes
empaquetadas (por ejemplo, eliminar directorios de control de versiones, o
eliminar arquitecturas).
.TP
.B extra_docs
Esta variable debe de apuntar a la ruta donde se encuentra toda la documentación
extra que debe instalarse en el directorio
.I /usr/share/doc/kernel\-image\-X.X.XX/ .
No hay ninguna comprobación de conflictos entre nombres, y los ficheros no son
comprimidos. Debido a esto, si desea que los ficheros sean comprimidos debe de
comprimirlos y luego proporcionar la ruta al fichero comprimido. La variable de
entorno
.B EXTRA_DOCS
lo modifica, es la forma más habitual de empaquetar documentación extra. 
.TP
.B kpkg_follow_symlinks_in_src
Esta opción es especialmente útil para aquellos que usan multitud de enlaces
simbólicos para compilar los núcleos. Con esta opción, los paquetes
kernel\-source y kernel\-header no estarán llenos de enlaces rotos, en su lugar,
se seguirán los enlaces simbólicos. Dese cuenta de que cualquier enlace
simbólico en las fuentes del núcleo se sustituirá por el fichero enlazado. La
variable de entorno
.B KPKG_FOLLOW_SYMLINKS_IN_SRC
modifica este comportamiento.
.TP
.B make_libc_headers
Esta opción es para el encargado de
.I libc6 
, cuando compila
.I libc6, 
para además empaquetar las cabeceras correspondientes.
.B NO LO USE
a menos que sepa lo que hace, una pequeña equivocación entre el paquete de
cabeceras y
.I libc6 
puede hacer que todo el código compilado en su máquina sea inestable. Ha sido
avisado. La variable de entorno
.B MAKE_LIBC_HEADERS
lo modifica.
.TP
.B CONCURRENCY_LEVEL
Si se define, esta variable establece el nivel de concurrencia usado para
compilar el núcleo y los módulos usando la opción
.I -j
en el subproceso make del objetivo
.B build
de
.B make\-kpkg.
Si se usa, debería ser un entero (pequeño).
.TP
.B ARCH_IN_NAME
Si se define, esta variable hace que
.B make\-kpkg
use un nombre extendido para la imagen del núcleo empotrando la sub\-arquitectura
en el nombre de la imagen, de este modo uno puede escribir un script que cree
múltiples sub\-arquitecturas, una detrás de la otra.
.B Note
que solamente afecta al
.I nombre
del paquete, no afecta a la localización de los módulos y demás.
.TP
.B CONFDIR
Esta variable debe apuntar a un directorio que contenga ficheros
.I .config
específicos de una arquitectura (consulte
.I /usr/share/kernel\-package/Config
para ejemplos). Útil para los que necesiten compilar para varias
arquitecturas. Por omisión apunta a
.I /usr/share/kernel\-package/Config
.TP
.B IMAGEDIR
Si quiere que la imagen se guarde en algún otro sitio distinto de
.I /boot
establezca esta variable al directorio deseado. Puede ser de ayuda para los
usuarios de
.B loadlin.
Por omisión es
.I /boot.
.TP
.B MODULE_LOC
Establezca esta variables, bien en el entorno o bien en el fichero de
configuración al lugar donde se encuentren módulos adicionales. Por omisión
.I /usr/src/modules
.TP
.B CONFDIR
Establezca esta variable, bien en el entorno o bien en el fichero de
configuración al lugar donde se encuentren los ficheros de configuración del
núcleo. Por omisión
.I /usr/share/kernel\-package/Config
.TP
.B PATCH_DIR 
Establezca esta variable, bien en el entorno o bien en el fichero de
configuración al lugar donde se encuentren parches adicionales. Por omisión
.I /usr/src/kernel\-patches/ARCHITECTURE
.TP
.B ALL_PATCH_DIR 
Establezca esta variable, bien en el entorno o bien en el fichero de
configuración al lugar donde se encuentren parches independientes de la
arquitectura adicionales. Por omisión
.I /usr/src/kernel\-patches/all
.PP
El valor una variable puede establecerse de forma que:
.IP a)
Los valores predeterminados están en el fichero rules. Se usan siempre que no
haya ninguna otra preferencia establecida.
.IP b)
Las variables pueden establecerse en el fichero de configuración 
.I /etc/kernel\-pkg.conf. 
Estos valores modifican los predeterminados.
.IP c)
Las variables también se pueden establecer con su correspondiente variable de
entorno. Estos valores predominan sobre el fichero de configuración y los
valores predeterminados.
.IP d)
Usando las opciones de 
.B make\-kpkg 
, o, si se usa directamente el fichero rules, en la línea de órdenes 
.br
.BI "# xxx/rules DEBIAN_REVISION=2.0a kernel_image"
.br
Esto predomina sobre todos los métodos descritos anteriormente.
.SH FICHEROS
El fichero descrito en este documento es
.I /etc/kernel\-pkg.conf.
o
.I ~/.kernel\-pkg.conf.
.SH "VÉASE TAMBIÉN"
.BR make\-kpkg (1),
.BR kernel\-img.conf (5),
.BR make (1),
.B El manual de GNU Make.
.SH FALLOS
No tiene fallos. Cualquier cosa que se lo parezca es un delirio, de verdad.
.SH AUTOR
Esta página del manual fue escrita por Manoj Srivastava <srivasta@debian.org>,
para el sistema Debian GNU/Linux.
.SH TRADUCTOR
Traducción de Rubén Porras Campo <debian\-l10n\-spanish@lists.debian.org>
