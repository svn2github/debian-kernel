#! /usr/bin/perl -w
#                              -*- Mode: Perl -*-
# make-kpkg ---
# Author           : root ( root@melkor.pilgrim.umass.edu )
# Created On       : Mon Jun 17 01:10:11 1996
# Created On Node  : melkor.pilgrim.umass.edu
# Last Modified By : Manoj Srivastava
# Last Modified On : Mon Aug 15 18:22:00 2005
# Last Machine Used: glaurung.internal.golden-gryphon.com
# Update Count     : 226
# Status           : Unknown, Use with caution!
# HISTORY          :
# Description      :
#
#
#
#    $Id: make-kpkg,v 1.94 2003/09/28 01:35:27 srivasta Exp $
#
require 5.002;
use strict;
use Getopt::Long;

=head1 NAME

make-kpkg - build Debian kernel packages from Linux kernel sources.

=cut

($main::MYNAME     = $main::0) =~ s|.*/||;
$main::Author      = "Manoj Srivastava";
$main::AuthorMail  = "srivasta\@debian.org";
$main::Version     = '$Revision: 1.94 $ ';

my $added_modules='';
my $added_patches='';
my $append_to_version='';
my $arch='';
my $arch_in_name=0;
my $bzimage;
my $config_target='oldconfig';
my $cross_compile='';
my $key_id='';
my $help_opt=0;
my $noexec;
my $initrd=0;
my $revision=0;
my $root_cmd;
my $signature="" ;
my $subarch='';
my $stem='';
my $targ_opt=0;
my $unsign_changelog='';
my $unsign_source='';
my $zimage;
my $mkimage='';

my %option_ctl = 
  (
   "help"                => \$help_opt,
   "noexec"              => \$noexec,
   "initrd"              => \$initrd,
   "revision=s"          => \$revision,
   "added_modules=s"     => \$added_modules,
   "added-modules=s"     => \$added_modules,
   "added-patches=s"     => \$added_patches,
   "added_patches=s"     => \$added_patches,
   "append-to-version=s" => \$append_to_version,
   "append_to_version=s" => \$append_to_version,
   "arch=s"              => \$arch,
   "config=s"            => \$config_target,
   "cross_compile=s"     => \$cross_compile,
   "cross-compile=s"     => \$cross_compile,
   "subarch=s"           => \$subarch,
   "stem=s"              => \$stem,
   "arch_in_name"        => \$arch_in_name,
   "arch-in-name"        => \$arch_in_name,
   "pgpsign=s"           => \$signature,
   "key_id=s"            => \$key_id,
   "targets"             => \$targ_opt,
   "zimage"              => \$zimage,
   "rootcmd=s"           => \$root_cmd,
   "us"                  => \$unsign_source,
   "uc"                  => \$unsign_changelog,
   "bzimage"             => \$bzimage,
   "mkimage=s"           => \$mkimage
  );

=head1 SYNOPSIS

 usage: make-kpkg [options] [target [target ...]]

=cut

=head1 DESCRIPTION

This manual page explains the  Debian  B<make-kpkg>  utility,
which  is  used  to create the kernel related Debian packÂ­
ages. This utility needs to be run from a top level  Linux
kernel source directory.

=cut

=head1 OPTIONS

=over 3

=item B<--help> Print out a usage message.

=item B<--revision> number

=over 2

Sets the Debian revision number for the packages produced to the
argument B<number>. This has certain constraints: It only has an
effect during the configure phase (in other words, if a file called
stamp-configure or both debian/changelog and debian/official exists,
this option has no effect -- run make-kpkg clean or manually remove
stamp-configure, and stamp-debian (and debian/official, if that
exists) for it to have an effect). I suggest you run make-kpkg clean
unless you know what you are doing. Secondly, it may contain only
alphanumerics and the characters + . (full stop, and plus)
and must contain a digit. B<NOTE>: No hyphens allowed. (Look at the
Debian policy manual for details). I<Actually, that is a lie: official
kernel and modules maintainers have special dispensation to use hyphens,
but it is strongly deprecated for most people, since we do no sanitization
of the version number, and dpkg and friends may choke on it at the end
of the compile unless one knows what one is doing.>

Optionally, you may prepend the revision with a digit followed by a colon (:)

This is because  B<dpkg> imposes an ordering on version numbers,
so that it can tell whether packages are being up- or downgraded and
so that dselect can tell whether a package it finds available is
newer than the one installed on the system.


=back

=item B<--append-to-version> foo

=item B<--append_to_version> foo

This argument (B<foo>) is appended to the value of the EXTRAVERSION
variable present in the kernel Makefile. Since EXTRAVERSION is a
component of the kernel version, it is also added to the Debian
package name, and, as such must obey the policy governing the package
name. That means it may contain only B<lowercase> alphanumerics and
the characters - + . (full stop, hyphen, and plus). Uppercase letters
are not permitted under the Policy for a new package.

Please note that you must run a B<make-kpkg clean> after configuring
the kernel using make (x|menu)?config, since that creates
include/linux/version.h without the appended version I<foo>.

=back

=item B<--added-modules> foo

=item B<--added_modules> foo

=over 2

The argument should be a comma or space separated list of additional
add-on modules (not in the main kernel tree) that you wish to
build when you invoke the modules_blah targets. You may give full path
names of the directory the modules reside in, or just the module name
if it can be found in C<MODULE_LOC>, which defaults to /usr/src/modules.
The default is that all modules in  C<MODULE_LOC> are compiled when
the modules_blah targets are invoked.

=back

=item B<--added-patches> foo

=item B<--added_patches> foo

=over 2

The argument should be a comma or space separated list of additional
patches to the kernel sources. Unlike the treatment of the modules,
you may only give the patch name (not the full path name of the patch
file).  It shall be applied during the configure phase (and removed in
the clean phase) if it can be found in the directories
C<ALL_PATCH_DIR/{apply,unpatch}/>, which defaults to a subdirectory of
/usr/src/kernel-patches/.  The default is that all patches are applied
if requested (By setting the env variable C<PATCH_THE_KERNEL> to YES)

=back

=item B<--arch> foo

=over 2

Sets the architecture. This is mostly useful when cross compiling.

=back

=item B<--cross-compile> foo

=item B<--cross_compile> foo

=over 2

Sets the target string. This is mostly useful when cross compiling.

=back

=item B<--subarch> foo

=over 2

Some architectures (the Alpha, and the m68k) require a different
kernel for each subarchitecture. This option provides a way of
specifying it as an argument to make-kpkg. Please note that additional
support for subarchitectures may be required in the kernel sources to
actually make this do anything.


=back

=item B<--arch-in-name> foo

=item B<--arch_in_name> foo

=over 2

This option uses an extended name for the kernel image package by
embedding the subarchitecture in the image name, so one could write a
script to create multiple subarchitectures one after the other. You
may also do this by setting the environment variable ARCH_IN_NAME.

=back

=item B<--stem> foo

=over 2

This option determines the stem of the name of the packages. This is
set to C<kernel> by default. You may also do this by setting the
environment variable KPKG_STEM.

=item B<--pgpsign> name

=over 2

Set the string used to sign the B<changes> file for any external modules
in I</usr/src/modules/> using PGP. This option will override the builtin
default and the site wide customizations stored in the file
I</etc/kernel-pkg.conf>.

=back


=item B<--config> I<target>

=over 2

Change the type of configure done from the default C<oldconfig>.
I<target> must be one of C<oldconfig>, C<config>, C<menuconfig>,
C<xconfig>, C<gconfig>, or C<old>, C<menu>, C<g> or C<x>.

This option is particularly useful when using PATCH_THE_KERNEL if some
of the patches change what configuration options are available.

=back

=item B<--targets>

=over 2

Prints out a list of known targets. See the Section B<Targets> below.

=back

=item B<--noexec>

=over 2

Pass  a  B<-n> option to the I<make> so that commands are merely
printed  to  the  screen  but  not actually  executed.  This is very
useful for debugging.

=back

=item B<--initrd>

=over 2

If make-kpkg is generating a kernel-image package, perform any actions
necessary for a kernel loaded using initrd. B<NOTE:> in older kernels,
this required a non-standard cramfs initrd patch to the kernel, unless
the mkinitrd configuration was modified not to use cramfs. The patch
usually shipped with B<Debian>.  Some architectures still need patches
to fix cramfs problems.

This may include extra dependencies, and modifications to maintainer
scripts.  It has no effect when make-kpkg is not making a kernel-image
package.(The INITRD_OK variable is now obsolete).

=back

=item B<--mkimage> foo

=over 2

This should be a command that produces an initrd image given a directory.
It is passed to the I<mkinitrd> as B<-m> option.

=back

=item B<--zimage>

=over 2

Makes a zImage kernel rather than a bzImage  kernel (the  default).
Useful for people having problems with bzImage kernels.

=back

=item B<--bzimage>

=over 2

Makes a bzImage kernel. Useful for people who  want a bzImage kernel
on sites where the default is zImage kernels.

=back

=item B<--rootcmd>

=over 2

The command that provides a means of gaining superuser access (for
example, `sudo' or `fakeroot') as needed by dpkg-buildpackages' C<-r>
option.

=back

=item B<--us>

=over 2

This option is passed to dpkg-buildpackage, and directs that package
not to sign the source. This is only relevant to the buildpackage
target.

=back

=item B<--uc>

=over 2

This option is passed to dpkg-buildpackage, and directs that package
not to sign the changelog. This is only relevant to the buildpackage
target.

=back

=back

The options maybe shortened to the smallest unique string, and may be
entered with either a - or a -- prefix, and you may use a space or an
= symbol between an option string and a value.  Please refer to man
Getopt::Long for details on how the options may be entered.

=cut


my $usage = <<"EOUSAGE";
This program should be run in a linux kernel source top level directory.
/usr/share/doc/kernel-package/Problems.gz contains a list of known problems.

usage: $main::MYNAME [options] target [target ...]
  where options are:
 --help                This message.
 --revision number     The debian revision number. ([a-zA-Z.+0-9]) (Must
                         have digit)
 --append-to-version foo
 --append_to_version foo an additional kernel sub-version. ([-a-z.+0-9])
                         Does not require editing the kernel Makefile
                         over rides env var APPEND_TO_VERSION.
                         requires a make-kpkg clean
 --added-modules foo
 --added_modules foo   Comma/space separated list of add on modules
                       affected by the modules_<blah> targets
 --added-patches bar
 --added_patches bar   Comma/space separated list of patches applicable
                        when patch_the_kernel is turned on
 --arch     foo        architecture
 --cross-compile
 --cross_compile       target string
 --subarch  bar        Set the subarch for the image being compiled
                        (have to be on a compatible machine).
 --arch-in-name
 --arch_in_name        Embed the subarch in the image package name
 --stem     foo        Call the packages foo-* instead of kernel-*
 --initrd              Create a image package suitable for initrd.
 --mkimage  foo        Command to generate the initrd image.
 --pgpsign  name       An ID used to sign the changes file using pgp.
 --config target       Change the type of configure done from the  default
                       oldconfig.
 --targets             Lists the known targets.
 --noexec              Pass a -n option to the make process
 --zimage              Create a kernel using zImage rather than bzImage
 --bzimage             Create a kernel using bzImage (in case the site
                       wide default is zimage, as set in
                       /etc/kernel-pkg.conf)
 --rootcmd method      A command that provides a means of gaining
                       superuser access (for example, `sudo' or
                       `fakeroot') as needed by dpkg-buildpackages'
                       -r option.
 --us                  This option is passed to dpkg-buildpackage, and
                       directs that package not to sign the
                       source. This is only relevant for the
                       buildpackage target.
 --uc                  This option is passed to dpkg-buildpackage, and
                       directs that package not to sign the
                       changelog. This is only relevant for the
                       buildpackage target.

Use one of --zimage or --bzimage, or none, but not both.

Option Format: The options may be shortened to the smallest unique
string, and may be entered with either a - or a -- prefix, and you may
use a space between an option string and a value. Please refer to man
Getopt::Long for details on how the options may be entered.

Version: $main::Version
$main::Author <$main::AuthorMail>
EOUSAGE
;

=head1 TARGETS

=over 3

=item B<clean>

=over 3

Cleans the kernel source directory of all files created by target
B<build>, and runs a I<make distclean>. (Please look at a Linux kernel
Makefile for details).  Please note that although we take care of the
list of current kernel configuration contained in the file I<.config>,
the file I<include/linux/autoconf.h> is not preserved.

=back

=item B<buildpackage>

=over 3

This target runs the targets B<clean>, B<build>, and B<binary>, and
produces the complete package using B<dpkg-buildpackage>.

=back

=item B<binary>

=over 3

This target produces all five Debian kernel packages by running the
targets B<kernel_source>, B<kernel_headers>, B<kernel_manual>,
B<kernel_doc> and B<kernel_image>.

=back

=item B<kernel_source>

=over 3

This target produces a debianised package of the Linux kernel
sources. The package produced also has scripts called at install and
delete times that manage the symbolic link I</usr/src/linux> and
ensure that the link is pointed at the latest source/header package on
the system.

=back

=item B<kernel_headers>

=over 3

This target produces a Debian package containing the header files
included in the Linux kernel. The package produced also has scripts
called at install and delete times that manage the symbolic link
I</usr/src/linux> and ensure that the link is pointed at the latest
source/header package on the system.

=back

=item B<kernel_doc>

=over 3

This target produces a Debian package containing the documentation
included in the Linux kernel.

=back

=item B<kernel_manual>

=over 3

This target produces a Debian package containing the section 9 manual
pages included in the Linux kernel.

=back

=item B<kernel_image>

=over 3

This target produces a Debian package of the Linux kernel source
image, and any modules configured in the kernel configuration file
I<.config>.  If there is no I<.config> file in the kernel source
directory, a default configuration is provided similar to the one used
to create the B<Debian> boot-floppies.  The package produced updates
the symbolic links in the root directory to point to the new kernel
image in I</boot>.  It also offers to run the Linux loader, B<LILO>
(or alternates like B<loadlin>, B<SILO>, B<QUIK>, B<VMELILO>, B<ZIPL>,
B<yaboot>, B<PALO> or B<GRUB> ), creating a configuration file for the
supported boot loaders if needed.  It also offers to put the new
kernel on a floppy, formatting the floppy if needed.  On deletion, the
package checks the version of the kernel running, and refuses to
delete a running kernel.

=back

=item B<build>

=over 3

This target, used by target B<kernel_image> above, compiles the Linux
kernel image.

=back

=item B<modules>

=over 3

This target allows you to build all add-on modules and packages that
are very dependent on the precise kernel version they are compiled for
at the same time you build your kernel image.  This target expects to
find the modules or packages under /usr/src/modules, and, for all such
directories, changes to I</usr/src/modules/x>, and runs the B<kdist> rule in
the local I<debian.rules> file.  This target should create the B<Debian>
module package(s), and may also produce a compressed tar file, and a
compressed diff file, with I<md5sums> recorded in a changes file using
B<dpkg-genchanges>.  The file is signed by the same identity that would
be used to sign the kernel packages.

=back

=item B<modules_config>

=over 3

This target allows you to  configure  all  packages under
I</usr/src/modules>.

=back

=item B<modules_image>

=over 3


This target allows you to build all packages under I</usr/src/modules>,
but does not create the source or diff files, and does not create and
sign a changes file.

=back

=item B<modules_clean>

=over 3


This target allows you to clean the modules directories.

=back

=item B<configure>

=over 3

This target allows people to create the debian directory and create a
configuration timestamp, so that any special edits to
configuration-generated files are not stomped over later.

=back

=back

=cut


my %Known_targets=
  (
   "clean"          => 1,
   "buildpackage"   => 1,
   "binary"         => 1,
   "binary-indep"   => 2,
   "debian"         => 1,
   "kernel_source"  => 3,
   "kernel-source"  => 3,
   "kernel_headers" => 3,
   "kernel-headers" => 3,
   "kernel-manual" => 3,
   "kernel_manual" => 3,
   "libc-kheaders"  => 3,
   "kernel_doc"     => 3,
   "kernel-doc"     => 3,
   "binary-arch"    => 2,
   "kernel_image"   => 3,
   "kernel-image"   => 3,
   "build"          => 4,
   "modules"        => 1,
   "modules_image"  => 1,
   "modules_config" => 1,
   "modules_clean"  => 1,
   "modules-image"  => 1,
   "modules-config" => 1,
   "modules-clean"  => 1,
   "configure"      => 1
  );

my $targets_help =<<EOTRGT;
 Known Targets are:
===============================================================================
|     Targets                      |   Automatically builds                   |
===============================================================================
| clean                            |                                          |
| buildpackage                     | Builds the whole package                 |
| binary                           | Builds kernel_{source,headers,image,doc} |
|       binary-indep               |                                          |
|            kernel_source         |                                          |
|            kernel_doc            |                                          |
|            kernel_manual         |                                          |
|       binary-arch                |                                          |
|            kernel_headers        |                                          |
|            kernel_image          | Builds build                             |
|                           build  |                                          |
| modules                          |                                          |
| modules_image                    |                                          |
| modules_config                   |                                          |
| modules_clean                    |                                          |
| configure                        | If you wish to edit files                |
|                           debian | generated by make config                 |
| debian                           | Creates ./debian dir, and                |
|                                  | optionally patches the source            |
===============================================================================
See /usr/share/kernel-package/rules for details.
EOTRGT
  ;

sub main (){
  my $ret;
  my $rules_file;
  my $alt_rules_file;
  my $target;
  my $errors = "";
  my $Targets = "";

  $rules_file = "debian/rules";
  $alt_rules_file = "/usr/share/kernel-package/ruleset/minimal.mk";

  $ret = GetOptions(%option_ctl);
  if(!$ret) {
        print "use --help to display command line syntax help.\n" ;
        exit 1;
  }
  if ($help_opt || $targ_opt){
    print "$usage" if $help_opt;
    print "$targets_help" if $targ_opt;
    exit 0;
  }

  if ($bzimage && $zimage){
    print "Use only one of bzimage and zimage options.\n";
    print "use --help to display command line syntax help.\n";
    exit 1;
  }

  if ($config_target !~ /^(?:|old|menu|x|g|rand|def|all(mod|yes|no))(config)?$/) {
    print "Config type must be one of {config,oldconfig,menuconfig,xconfig,gconfig\n";
    print " randconfig,defconfig,allmodconfigallyesconfig,allnoconfig}.\n";
    print "use --help to display command line syntax help.\n";
    exit 1;
  }
  $config_target = 'config' unless $2;

  if ($ENV{'MAKEFLAGS'} && 
      ($ENV{'MAKEFLAGS'} =~ /-j/ || $ENV{'MAKEFLAGS'} =~ /--jobs/ )) {
    $errors .= "The environment variable MAKEFLAGS contains the flag -j.\n" .
      "Unfortunately, this is not supported at this time. Instead, please\n" .
        "use the supported mechanism by setting CONCURRENCY_LEVEL\n" ;
  }

  if ($ENV{'MFLAGS'} && 
      ($ENV{'MFLAGS'} =~ /-j/ || $ENV{'MFLAGS'} =~ /--jobs/ )) {
    $errors .= "The environment variable MFLAGS contains the flag -j.\n" .
      "Unfortunately, this is not supported at this time. Instead, please\n" .
        "use the supported mechanism by setting CONCURRENCY_LEVEL\n" ;
  }

  if ($root_cmd || $unsign_source || $unsign_changelog){
    if ($root_cmd){
      if ($root_cmd =~ m/^-/o){
        $errors .= "The rootcmd option takes a simple command name\n" .
          "Like sudo or fakeroot. The leading - confuses me.\n" .
            "rejecting rootcmd $root_cmd";
      }
    }
    my $argstring = join (' ', @ARGV);
  }

  # Fine. Now we check targets.
  foreach $target (@ARGV){
    if ($Known_targets{$target}){
      $Targets .= "$target ";
    }
    else {
      $errors .= "Unknown target $target ";
    }
  }
  if ($errors){
    print STDERR "Error: $errors\n";
    print "use --targets to display help on valid targets.\n";
    exit 1;
  }
  # See if we are running in a linux kernel directory
  if ((!(-d "drivers" && -d "kernel" && -d "fs" && -d "include/linux"))
      && (!(-d "dev" && -d "kern" && -d "fs" && -d "i386/include"))){
    my @other_targets = grep (! m/^modules/, @ARGV);
    if ($#other_targets != -1 || ! -d "include/linux") {
      print STDERR <<EOERR;
We do not seem to be in a top level linux kernel source directory
tree. Since we are trying to make a kernel package, that does not make
sense.  Please change directory to a top level linux kernel source
directory, and try again. (If I am wrong, and this is indeed a top
level linux kernel source directory, then I have gotten sadly out of
date with current kernels, and you should upgrade kernel-package)
EOERR
      ;
      exit 1;
    }
    else {
      print STDERR <<EOERR2;
We do not seem to be in a top level linux kernel source directory
tree. However, there are kernel headers that may be suitable to build
external kernel modules. Since you do not have non-module targets, let
us continue.
EOERR2
  ;
    }
  }

  if ( ! -e "$alt_rules_file"){
    print STDERR <<EOERR1;
    Could not locate the rules file (Normally found at the location
 /usr/share/kernel-package/rules), which would seem an impossibility.
 I give up.
EOERR1
     ;
    die "Could not find rules file\n";
  }

  if ($Targets =~ m/^\bclean\b/) {
    if ($Targets !~ m/^\s*clean\s*$/) {
      print STDERR <<EOERR3;
 The clean target must be called by itself, and not along with other
 targets on the same invocation, since that may cause unforeseen
 errors and complications.  The targets I have been called with are:
  $Targets
 I am replacing this list with just the clean target, please retry
 with the clean target on a separate invocation.
EOERR3
     ;
      $Targets ="clean";
    }
  }

  # Fine. Just do it!
  my $alt_cmd = "make -f $alt_rules_file " 
    unless -f "debian/ruleset/kernel_version.mk";
  my $command = "$rules_file ";
  if ($signature){
    $command .= "  PGP_SIGNATURE=$signature ";
  }
  if ($Targets =~ m/^\s*clean\s*$/) {
    $alt_cmd  .= "clean " unless -f "debian/ruleset/kernel_version.mk";
  }
  else {
    $alt_cmd  .= "debian" unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($revision) {
    if ($Targets !~ m/^\s*clean\s*$/) { # No need to do all this for just clean
      if (-e "debian/changelog") {
        open(INPUT, "debian/changelog") or die "Can not open debian/changelog";
        my $line=<INPUT>;
        close INPUT;
        chomp $line;
        my $version = '';
        $line =~ m/\((\S+)\)/;
        $version = $1;
        if ($revision && $version ne $revision) {
          print STDERR <<"EOMSG";
I note that you are using the --revision flag with the value
   $revision.
However, the ./debian/changelog file exists, and has a different value
   $version.
I am confused by this discrepancy, and am halting.
EOMSG
	  ;
	  exit (2);
	}
      }
      
      $command .= " DEBIAN_REVISION=$revision ";
      if ($revision !~ m/^(\d+:)?[a-zA-Z\d\.\+\-]+$/o) {
	print STDERR " Error: The revision string may only contain\n";
	print STDERR " alphanumerics and  the  characters  +  .\n";
	print STDERR " If epochs are used, the colon : is also allowed\n";
	print STDERR " The current value is: $revision\n";
	print STDERR " Aborting.\n";
	exit 1;
      }

      if ($revision =~ m/\-/o) {
	print STDERR " I note you are using a hyphen in the revision number.\n";
	print STDERR " Please ensure that the upstream and debian revision\n";
	print STDERR " numbers are policy compliant enough that dpkg and\n";
	print STDERR " shall not choke on them at the end of the compile\n";
	if ($revision !~ m/^(\d+:)?[a-zA-Z\d\.\+\-]+-\d+[^-]*$/o) {
	  die " The revision $revision fails policy compliance, aborting\n";
	}
	else {
	  sleep 3;
	}
      }

      if ($revision !~ m/^(\d+:)?.*?\d.*$/){
	print STDERR " Error: The revision string must contain digits,\n";
	print STDERR " or else the package creation scripts complain\n";
	print STDERR " The current value is: $revision\n";
	print STDERR " Aborting.\n";
	exit 1;
      }
    }
  }
  else {
    if ($Targets !~ m/^\s*clean\s*$/) {
      if (-e "debian/changelog") {
	open(INPUT, "debian/changelog") or die "Can not open debian/changelog";
	my $line=<INPUT>;
	close INPUT;
	chomp $line;
	my $version = '';
	$line =~ m/\((\S+)\)/;
	$version = $1;
	$command .= " DEBIAN_REVISION=$version ";
      }
      else {
	# $command .= " DEBIAN_REVISION=5:123.Custom ";
      }
    }
    else {
      $command .= " DEBIAN_REVISION=5:10.Custom ";
    }
  }

  if ($Targets !~ m/^\s*clean\s*$/) {
    if ($append_to_version) {
      if ($append_to_version !~ m/^[a-z\d\.\-\+]+$/o) {
        print STDERR " Error: The extended version may only contain\n";
        print STDERR " lowercase alphanumerics and  the  characters  - +  .\n";
        print STDERR " The current value is: $append_to_version\n";
        print STDERR " Aborting.\n";
        exit 1;
      }
      if ($append_to_version =~ m/[A-Z]+/o){
        print STDERR "Error: Uppercase letters are not allowed in\n";
        print STDERR "the extended version, since the version becomes\n";
        print STDERR "part of the kernel-image name; and package names\n";
        print STDERR "may only contain lowercase alphanumerics.\n";
        print STDERR "I have $append_to_version, which shall be dissallowed \n";
        print STDERR "by the packaging tools. Aborting.\n";
        exit 1;
      }

      if (-f "include/linux/version.h" && ! -f 'debian/official' &&
          ! $ENV{"VERSION_H_OK"} && ! ($Targets =~ m/^\s*clean\s*$/ )) {
        open (VERSION, "include/linux/version.h") or
          die "Could not read include/linux/version.h:$!";

        my $temp_string         = '';
        my $kernel_version      = '';
        my $patch_level         = '';
        my $sublevel            = '';
        my $extra_version       = '';
        my $uts_release_version = '';

        $temp_string = `egrep '^VERSION +=' Makefile 2>/dev/null `;
        if ($temp_string =~ m/^\D*(\d+)/) {
          $kernel_version = $1;
        }

        $temp_string = `egrep '^PATCHLEVEL +=' Makefile 2>/dev/null `;
        if ($temp_string =~ m/^\D*(\d+)/) {
          $patch_level = $1;
        }

        $temp_string = `egrep '^SUBLEVEL +=' Makefile 2>/dev/null `;
        if ($temp_string =~ m/^\D*(\d+)/) {
          $sublevel =  $1;
        }

        $temp_string = `egrep '^EXTRAVERSION +=' Makefile 2>/dev/null `;
        if ($temp_string =~ m/EXTRAVERSION\s*=\s*(\S+)/) {
          $extra_version = $1;
        }

        while (<VERSION>) {
          chomp;
          m/^\s*#define\s+UTS_RELEASE\s+("?)(\S+)\1/ || next;
          $uts_release_version = $2;
        }

        my $composite_version = "$kernel_version.$patch_level.$sublevel" .
          $extra_version  . $append_to_version;
        if ($uts_release_version ne $composite_version) {
          print STDERR "Warning: The file include/linux/version.h exists\n";
          print STDERR "The contained UTS_VERSION string:\n";
          print STDERR "\t\t\t\"$uts_release_version\"\n";
          print STDERR "does not match expectations:\n";
          print STDERR "\t\t\t\"$composite_version\"\n";
          print STDERR "I'll try and recover\n";
          system ("touch", "Makefile") == 0
            or die "touch Makefile failed:$?";
        }
      }
      $command .= " APPEND_TO_VERSION=$append_to_version ";
      $alt_cmd .= " APPEND_TO_VERSION=$append_to_version "
        unless -f "debian/ruleset/kernel_version.mk";
    }
  }

  if ($arch){
    $command .= " KPKG_ARCH=$arch ";
    $alt_cmd .= " KPKG_ARCH=$arch  "
      unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($config_target ne 'oldconfig') {
    $command .= " CONFIG_TARGET=$config_target ";
  }
  if ($cross_compile){
    $command .= " CROSS_COMPILE=$cross_compile ";
    $alt_cmd .= " CROSS_COMPILE=$cross_compile "
      unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($subarch){
    $command .= " KPKG_SUBARCH=$subarch ";
    $alt_cmd .= " KPKG_SUBARCH=$subarch "
      unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($added_modules) {
    $command .= " KPKG_SELECTED_MODULES=\"$added_modules\" ";
    $alt_cmd .= " KPKG_SELECTED_MODULES=\"$added_modules\" "
      unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($added_patches) {
    $command .= " KPKG_SELECTED_PATCHES=\"$added_patches\" ";
    $alt_cmd .= " KPKG_SELECTED_PATCHES=\"$added_patches\" "
      unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($arch_in_name){
    $command .= " ARCH_IN_NAME=YES ";
    $alt_cmd .= " ARCH_IN_NAME=YES "
      unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($stem) {
    $command .= " KPKG_STEM=$stem ";
    $alt_cmd .= " KPKG_STEM=$stem "
      unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($noexec){
    $command .= " -n ";
    $alt_cmd .= " -n "
      unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($initrd) {
    $command .= " INITRD=YES ";
    $alt_cmd .= " INITRD=YES "
      unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($mkimage) {
    my $temp_string = $mkimage;
    $temp_string =~ s/\$/$$/g;
    $command .= " MKIMAGE='$temp_string' ";
    $alt_cmd .= " MKIMAGE='$temp_string' "
      unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($root_cmd){
     $command .= " ROOT_CMD=$root_cmd ";
     $alt_cmd .= " ROOT_CMD=$root_cmd "
       unless -f "debian/ruleset/kernel_version.mk";
  }
  if ($unsign_changelog){
    $command .= " UNSIGN_CHANGELOG=YES ";
  }
  if ($unsign_source){
    $command .= " UNSIGN_SOURCE=YES ";
  }
  if ($zimage){
    $command .= " IMAGE_TYPE=zImage ";
  }
  elsif ($bzimage) {
    $command .= " IMAGE_TYPE=bzImage ";
  }

  my $hostcc = $ENV{'HOSTCC'} if $ENV{'HOSTCC'};
  $hostcc =~ s/^\s+//g if $hostcc;
  $hostcc =~ s/\s+$//g if $hostcc;
  $hostcc .= " ";
  if ($hostcc eq " ") { $hostcc = "gcc"; };

  my $cc = $ENV{'CC'} if $ENV{'CC'};
  $cc =~ s/^\s+//g if $cc;
  $cc =~ s/\s+$//g if $cc;
  $cc .= " ";
  if ($cc eq ' ') { $cc = $cross_compile; $cc .= "gcc "; };

  #$cc .= " -D__KERNEL__ -I";
  #chomp($cc .= `pwd`);
  #$cc .= "/include";

  # For some reason, this causes all modules to fail
  #$command .= " CC=\"$cc\" HOSTCC=\"$hostcc\"";
  $command .= " $Targets";
  # print STDERR $command;

  if (! -f "debian/ruleset/kernel_version.mk" && "$alt_cmd" !~ /^\s*$/) {
    print STDERR "exec $alt_cmd\n";
    if ($Targets =~ m/^\s*clean\s*$/ || $Targets =~ m/^\s*debian\s*$/ ) {
      # There is no ./debian, and we do need to preserve .config, and so on
      exec $alt_cmd;
    }
    else {
      # We call system, and not exec, since we are just creating a
      # ./debian dir here, _then_ we go and do the real command.
      system ($alt_cmd) == 0
        or die "Failed to create a ./debian directory: $!";
    }
  }
  # ./debian/rules had better be present now
  if (! -x "$rules_file"){
    print STDERR <<EOERR19;
    Could not locate the rules file (Normally found at the location
 $rules_file), which would seem an
 impossibility. I give up.
EOERR19
     ;
    die "Could not find rules file\n";
  }
  print STDERR "exec $command\n";
  exec $command;
}

## Now just call main
&main();

=head1 FILES

Apart from the runtime options, the debian.rules file run by B<make-kpkg>
also looks for site-wide defaults in the file I</etc/kernel-pkg.conf>.
The default configuration allows there to be a site wide override for
the full name and email address of the person responsible for
maintaining the kernel packages on the site, but the
I</etc/kernel-pkg.conf> file is actually a I<Makefile> snippet, and any
legal make directives may be included in there.  B<Note>: Caution is
urged with this file, since you can totally change the way that the
make is run by suitably editing this file. Please look at
I</usr/share/doc/kernel-package/Problems.gz> for a list of known
problems while compiling kernel images.

=cut


=head1 B<SEE ALSO>

B<kernel-pkg.conf>(5), B<dpkg-deb>(1), B<dpkg-source>(1),  B<make>(1),
B<The GNU Make manual>, and the extensive documentation in the
directory I</usr/share/doc/kernel-package/>

=cut


=head1 BUGS

None known so far.

=cut

=head1 AUTHOR

This  was  written by Manoj Srivastava <srivasta@debian.org>, for the
Debian GNU/Linux system.

=cut


exit 0;
__END__
