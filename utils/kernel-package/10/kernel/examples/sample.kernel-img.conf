# This is a sample /etc/kernel-img.conf file
# Set to Yes if you want the kernel image vmlinuz  in /boot rather
# than the default /.  
link_in_boot = NO       

# By default, the kernel image post installation script shall create or
# update the /vmlinuz and /vmlinuz.old symbolic links.  This is true if
# a /vmlinuz link already exists, however, in absence of /vmlinuz, the
# script looks to see if this configuration file exists.  If it does
# not, the configuration script asks the user whether to create the
# symbolic link, and stashes the answer in a newly created
# /etc/kernel-img.conf.  If the configuration file already exists, and
# if this option is set to No, no symbolic link is ever created. This
# for people who have other means of booting their machines, and do not
# like the symbolic links cluttering up their / directory.
do_symlink = Yes

# Whether to use symlinks to the image file.  Mutually exclusive to
# reverse_symlink.  Can be used with link_in_boot.  If set to Yes, the
# image is placed in vmlinuz (instead of /boot/vmlinuz- X.X.XX).  The
# old vmlinuz is moved to vmlinuz.old unconditionally. (Normally, that
# is only done if the version of the new image differs from the old
# one). This restricts you to two images, unless you take additional
# action and save copies of older images. This is for people who have
# boot on a system that does not use symbolic links (and say, they use
# loadlin as a boot loader). 
no_symlink = No

       
# Whether to use reverse symlinks (that is, the real file is the one
# without the version number, and the number version is the link) to
# the image file.  Mutually exclusive to no_symlink.  Can be used with
# link_in_boot.  Just like no_symlink, except that the
# /boot/vmlinuz-X.XX is a symbolic link to the real new image,
# vmlinuz. This, too, restricts you to just two images unless further
# action is taken.  The older symlinks are left dangling.  This is for
# people with boot on umsdos, and who can't see the link in dos, but do
# want to know the image version when in Linux.  This is a Hack.
reverse_symlink = NO

       
# If you want the symbolic link (or image, if move_image is set) to be
# stored elsewhere than / set this variable to the dir where you
# want the symbolic link.  Please note that this is not a Boolean
# variable.  This may be of help to loadlin users, who may set both
# this and move_image. Defaults to /. This can be used in conjunction
# with all above options except link_in_boot, which would not make
# sense.  (If both image_dest and link_in_boot are set, link_in_boot
# overrides).
image_dest = /
       
# Instead of creating symbolic links to (or, if reverse_symlinks is
# set, from) image_dest, the image is moved from its location in /boot
# into image_dest.  If reverse_symlinks is set, /boot shall contain a
# symbolic link to the actual image.  This option can be useful to
# people using loadlin, who may need the image to be moved to a
# different dos partition.  
#move_image = NO
       
# If set, the preinst shall silently try to move /lib/modules/version
# out of the way if it is the same version as the image being
# installed. Use at your own risk.  
#clobber_modules = NO
       
# If set to NO, this shortcircuits all attempts to create boot
# floppies, run lilo, etc. This has the additional side effect that the
# postinst is silent.  Setting both do_bootfloppy and do_bootloader to
# NO implies setting do_boot_enable to NO. 
do_boot_enable =  Yes.

       
# If set to NO, this prevents the postinst from asking questions about
# creating a boot floppy, and no boot floppy is created. The bootloader
# shall still be run.  This may cut down on the interaction the
# postinst has.  (It still prompts before formatting /dev/fd0) 
do_bootfloppy = YES
       
# If set to NO, this prevents the postinst from running the boot
# loader.  The user may still be asked to create a floppy, unless
# do_bootfloppy is also set to NO.
do_bootloader = YES
       
# If set to yes, the kernel image postinst script shall go to
# extraordinary lengths to ensure that the symbolic links are
# relative. Normally, the symbolic links are relative when it
# is easily determinable that relative links shall work.
relative_links = NO
