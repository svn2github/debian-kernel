# origin: kaber (BitKeeper)
# cset: 1.1449.21.26 (2.4) key=4132a90b_ZR2MJK9KLAcYgPV5naI5A
# URL: http://linux.bkbits.net:8080/linux-2.4/cset@4132a90b_ZR2MJK9KLAcYgPV5naI5A
# inclusion: upstream
# descrition: [NETFILTER]: Flush fragment queue on conntrack unload
# revision date: Tue, 22 Mar 2005 17:55:05 +0900
#
# S rset: ChangeSet|1.1449.21.25..1.1449.21.26
# I rset: net/ipv4/netfilter/ip_conntrack_core.c|1.33..1.34
# I rset: net/ipv4/ip_fragment.c|1.9..1.10
# R rset: net/netsyms.c|1.48..1.49
# I rset: net/ipv4/netfilter/ip_conntrack_standalone.c|1.14..1.15
# I rset: include/net/ip.h|1.5..1.6
# I rset: include/linux/netfilter_ipv4/ip_conntrack.h|1.12..1.13
#
# Key:
# S: Skipped  ChangeSet file only
# O: Original Followed by Updated
# U: Updated  Included with updated range of versions
# I: Included Included verbatim
# E: Excluded Excluded on request from user
# D: Deleted  Manually deleted by subsequent user edit
# R: Revised  Manually revised by subsequent user edit
#
#
# This is a BitKeeper generated diff -Nru style patch.
#
# ChangeSet
#   2004/08/29 21:11:55-07:00 kaber@trash.net 
#   [NETFILTER]: Flush fragment queue on conntrack unload
#   
#   Problem discovered, and original version of patch, by
#   Olaf Kirch.
#   
#   Signed-off-by: Patrick McHardy <kaber@trash.net>
#   Signed-off-by: David S. Miller <davem@redhat.com>
# 
# net/netsyms.c
#   2004/08/29 21:11:49-07:00 kaber@trash.net +1 -0
#   [NETFILTER]: Flush fragment queue on conntrack unload
#   
#   Problem discovered, and original version of patch, by
#   Olaf Kirch.
#   
#   Signed-off-by: Patrick McHardy <kaber@trash.net>
#   Signed-off-by: David S. Miller <davem@redhat.com>
# 
# net/ipv4/netfilter/ip_conntrack_standalone.c
#   2004/08/29 21:11:49-07:00 kaber@trash.net +7 -0
#   [NETFILTER]: Flush fragment queue on conntrack unload
#   
#   Problem discovered, and original version of patch, by
#   Olaf Kirch.
#   
#   Signed-off-by: Patrick McHardy <kaber@trash.net>
#   Signed-off-by: David S. Miller <davem@redhat.com>
# 
# net/ipv4/netfilter/ip_conntrack_core.c
#   2004/08/29 21:11:49-07:00 kaber@trash.net +8 -0
#   [NETFILTER]: Flush fragment queue on conntrack unload
#   
#   Problem discovered, and original version of patch, by
#   Olaf Kirch.
#   
#   Signed-off-by: Patrick McHardy <kaber@trash.net>
#   Signed-off-by: David S. Miller <davem@redhat.com>
# 
# net/ipv4/ip_fragment.c
#   2004/08/29 21:11:49-07:00 kaber@trash.net +13 -3
#   [NETFILTER]: Flush fragment queue on conntrack unload
#   
#   Problem discovered, and original version of patch, by
#   Olaf Kirch.
#   
#   Signed-off-by: Patrick McHardy <kaber@trash.net>
#   Signed-off-by: David S. Miller <davem@redhat.com>
# 
# include/net/ip.h
#   2004/08/29 21:11:49-07:00 kaber@trash.net +1 -0
#   [NETFILTER]: Flush fragment queue on conntrack unload
#   
#   Problem discovered, and original version of patch, by
#   Olaf Kirch.
#   
#   Signed-off-by: Patrick McHardy <kaber@trash.net>
#   Signed-off-by: David S. Miller <davem@redhat.com>
# 
# include/linux/netfilter_ipv4/ip_conntrack.h
#   2004/08/29 21:11:49-07:00 kaber@trash.net +1 -0
#   [NETFILTER]: Flush fragment queue on conntrack unload
#   
#   Problem discovered, and original version of patch, by
#   Olaf Kirch.
#   
#   Signed-off-by: Patrick McHardy <kaber@trash.net>
#   Signed-off-by: David S. Miller <davem@redhat.com>
# 
#
===== net/ipv4/netfilter/ip_conntrack_core.c 1.33 vs 1.34 =====
--- 1.33/net/ipv4/netfilter/ip_conntrack_core.c	2004-06-22 06:15:33 +09:00
+++ 1.34/net/ipv4/netfilter/ip_conntrack_core.c	2004-08-30 13:11:49 +09:00
@@ -1183,6 +1183,8 @@ void ip_ct_refresh(struct ip_conntrack *
 	WRITE_UNLOCK(&ip_conntrack_lock);
 }
 
+int ip_ct_no_defrag;
+
 /* Returns new sk_buff, or NULL */
 struct sk_buff *
 ip_ct_gather_frags(struct sk_buff *skb)
@@ -1191,6 +1193,12 @@ ip_ct_gather_frags(struct sk_buff *skb)
 #ifdef CONFIG_NETFILTER_DEBUG
 	unsigned int olddebug = skb->nf_debug;
 #endif
+
+	if (unlikely(ip_ct_no_defrag)) {
+		kfree_skb(skb);
+		return NULL;
+	}
+
 	if (sk) {
 		sock_hold(sk);
 		skb_orphan(skb);
===== net/ipv4/ip_fragment.c 1.9 vs 1.10 =====
--- 1.9/net/ipv4/ip_fragment.c	2004-08-19 06:25:49 +09:00
+++ 1.10/net/ipv4/ip_fragment.c	2004-08-30 13:11:49 +09:00
@@ -240,15 +240,15 @@ static __inline__ void ipq_kill(struct i
 }
 
 /* Memory limiting on fragments.  Evictor trashes the oldest 
- * fragment queue until we are back under the low threshold.
+ * fragment queue until we are back under the threshold.
  */
-static void ip_evictor(void)
+static void __ip_evictor(int threshold)
 {
 	struct ipq *qp;
 	struct list_head *tmp;
 	int work;
 
-	work = atomic_read(&ip_frag_mem) - sysctl_ipfrag_low_thresh;
+	work = atomic_read(&ip_frag_mem) - threshold;
 	if (work <= 0)
 		return;
 
@@ -273,6 +273,11 @@ static void ip_evictor(void)
 	}
 }
 
+static inline void ip_evictor(void)
+{
+	__ip_evictor(sysctl_ipfrag_low_thresh);
+}
+
 /*
  * Oops, a fragment queue timed out.  Kill it and send an ICMP reply.
  */
@@ -681,4 +686,9 @@ void ipfrag_init(void)
 	ipfrag_secret_timer.function = ipfrag_secret_rebuild;
 	ipfrag_secret_timer.expires = jiffies + sysctl_ipfrag_secret_interval;
 	add_timer(&ipfrag_secret_timer);
+}
+
+void ipfrag_flush(void)
+{
+	__ip_evictor(0);
 }
===== net/netsyms.c 1.48 vs 1.49.edit =====
--- 1.48/net/netsyms.c	2004-06-09 03:27:18 +09:00
+++ 1.49.edit/net/netsyms.c	2005-03-22 19:07:37.591410712 +0900
@@ -290,6 +290,7 @@ EXPORT_SYMBOL(ip_dev_find);
 EXPORT_SYMBOL(inetdev_by_index);
 EXPORT_SYMBOL(in_dev_finish_destroy);
 EXPORT_SYMBOL(ip_defrag);
+EXPORT_SYMBOL(ipfrag_flush);
 EXPORT_SYMBOL(inet_peer_idlock);
 
 /* Route manipulation */
===== net/ipv4/netfilter/ip_conntrack_standalone.c 1.14 vs 1.15 =====
--- 1.14/net/ipv4/netfilter/ip_conntrack_standalone.c	2004-06-22 06:16:57 +09:00
+++ 1.15/net/ipv4/netfilter/ip_conntrack_standalone.c	2004-08-30 13:11:49 +09:00
@@ -393,6 +393,13 @@ static int init_or_cleanup(int init)
  cleanup_inandlocalops:
 	nf_unregister_hook(&ip_conntrack_local_out_ops);
  cleanup_inops:
+	/* Frag queues may hold fragments with skb->dst == NULL */
+	ip_ct_no_defrag = 1;
+	local_bh_disable();
+	br_write_lock(BR_NETPROTO_LOCK);
+	br_write_unlock(BR_NETPROTO_LOCK);
+	ipfrag_flush();
+	local_bh_enable();
 	nf_unregister_hook(&ip_conntrack_in_ops);
  cleanup_proc:
 	proc_net_remove("ip_conntrack");
===== include/net/ip.h 1.5 vs 1.6 =====
--- 1.5/include/net/ip.h	2004-08-16 11:28:55 +09:00
+++ 1.6/include/net/ip.h	2004-08-30 13:11:49 +09:00
@@ -228,6 +228,7 @@ extern int	ip_call_ra_chain(struct sk_bu
  */
  
 struct sk_buff *ip_defrag(struct sk_buff *skb);
+extern void ipfrag_flush(void);
 extern int ip_frag_nqueues;
 extern atomic_t ip_frag_mem;
 
===== include/linux/netfilter_ipv4/ip_conntrack.h 1.12 vs 1.13 =====
--- 1.12/include/linux/netfilter_ipv4/ip_conntrack.h	2004-06-22 06:15:33 +09:00
+++ 1.13/include/linux/netfilter_ipv4/ip_conntrack.h	2004-08-30 13:11:49 +09:00
@@ -249,6 +249,7 @@ extern void ip_ct_refresh(struct ip_conn
 /* Call me when a conntrack is destroyed. */
 extern void (*ip_conntrack_destroyed)(struct ip_conntrack *conntrack);
 
+extern int ip_ct_no_defrag;
 /* Returns new sk_buff, or NULL */
 struct sk_buff *
 ip_ct_gather_frags(struct sk_buff *skb);
