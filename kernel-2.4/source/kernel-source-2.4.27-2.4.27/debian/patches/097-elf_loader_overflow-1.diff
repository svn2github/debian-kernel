# origin: Chris Wright <chrisw@osdl.org>
# cset: 1.1531 key=41a30a666cc7i7YZExn2ROMLgQwGWg
# inclusion: uptream
# revision date: Wed, 24 Nov 2004 16:52:24 +0900
# description: [PATCH] binfmt_elf: handle partial reads gracefully
#
# This is a BitKeeper generated diff -Nru style patch.
#
# ChangeSet
#   2004/11/11 15:19:55-02:00 chrisw@osdl.org 
#   [PATCH] binfmt_elf: handle partial reads gracefully
#   
#   Here's a backport of the fix that's in 2.6 tree.
#   
#   Make sure kernel reads full size of elf data.  Error out if mmap
#   fails when mapping any sections of the executable.  Make sure
#   interpreter string is NULL terminated.
#   
#   Signed-off-by: Chris Wright <chrisw@osdl.org>
#   
#   ===== fs/binfmt_elf.c 1.31 vs edited =====
# 
# fs/binfmt_elf.c
#   2004/11/11 04:22:28-02:00 chrisw@osdl.org +25 -8
#   binfmt_elf: handle partial reads gracefully
# 
diff -Nru a/fs/binfmt_elf.c b/fs/binfmt_elf.c
--- a/fs/binfmt_elf.c	2004-11-24 16:39:09 +09:00
+++ b/fs/binfmt_elf.c	2004-11-24 16:39:09 +09:00
@@ -299,9 +299,12 @@
 		goto out;
 
 	retval = kernel_read(interpreter,interp_elf_ex->e_phoff,(char *)elf_phdata,size);
-	error = retval;
-	if (retval < 0)
+	error = -EIO;
+	if (retval != size) {
+		if (retval < 0)
+			error = retval;	
 		goto out_close;
+	}
 
 	eppnt = elf_phdata;
 	for (i=0; i<interp_elf_ex->e_phnum; i++, eppnt++) {
@@ -472,9 +475,12 @@
 		goto out;
 
 	retval = kernel_read(bprm->file, elf_ex.e_phoff, (char *) elf_phdata, size);
-	if (retval < 0)
+	if (retval != size) {
+		if (retval >= 0)
+			retval = -EIO;
 		goto out_free_ph;
-		
+	}
+
 	files = current->files;		/* Refcounted so ok */
 	retval = unshare_files();
 	if (retval < 0)
@@ -520,8 +526,14 @@
 			retval = kernel_read(bprm->file, elf_ppnt->p_offset,
 					   elf_interpreter,
 					   elf_ppnt->p_filesz);
-			if (retval < 0)
+			if (retval != elf_ppnt->p_filesz) {
+				if (retval >= 0)
+					retval = -EIO;
 				goto out_free_interp;
+			}
+			/* make sure path is NULL terminated */
+			elf_interpreter[elf_ppnt->p_filesz - 1] = '\0';
+
 			/* If the program interpreter is one of these two,
 			 * then assume an iBCS2 image. Otherwise assume
 			 * a native linux image.
@@ -540,8 +552,11 @@
 			if (IS_ERR(interpreter))
 				goto out_free_interp;
 			retval = kernel_read(interpreter, 0, bprm->buf, BINPRM_BUF_SIZE);
-			if (retval < 0)
+			if (retval != BINPRM_BUF_SIZE) {
+				if (retval >= 0)
+					retval = -EIO;
 				goto out_free_dentry;
+			}
 
 			/* Get the exec headers */
 			interp_ex = *((struct exec *) bprm->buf);
@@ -679,8 +694,10 @@
 		}
 
 		error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt, elf_prot, elf_flags);
-		if (BAD_ADDR(error))
-			continue;
+		if (BAD_ADDR(error)) {
+			send_sig(SIGKILL, current, 0);
+			goto out_free_dentry;
+		}
 
 		if (!load_addr_set) {
 			load_addr_set = 1;
