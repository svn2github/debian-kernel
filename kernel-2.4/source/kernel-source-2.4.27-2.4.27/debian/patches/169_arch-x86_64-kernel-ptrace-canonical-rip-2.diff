commit 3a36ef7ace64c507f6b087071429dbfed7d2a96d
tree f6097f56ad699f67e1c0dca233a095ce32715bc8
parent 2e7fe37125e00cf9090416345e36af80d7761e9a
author Andi Kleen <ak@suse.de> 1119964697 +0200
committer Marcelo Tosatti <marcelo.tosatti@cyclades.com> 1120053000 -0300

[PATCH] Fix canonical checking for segment registers in ptrace

Fix canonical checking for segment registers in ptrace

This avoids a local DOS where a process could oops the kernel by
passing bogus values to ptrace. Some versions of UML did this.

Found by Alexander Nyberg

Signed-off-by: Andi Kleen <ak@suse.de>

I:100644 100644 812961f0f1b71ae796a00bbed676330d3cea851e edaf18bc3ae94dfbc4c0f2a26d396df1f3b90f61 M	arch/x86_64/kernel/ptrace.c

Key:
S: Skipped
I: Included Included verbatim
D: Deleted  Manually deleted by subsequent user edit
R: Revised  Manually revised by subsequent user edit

diff --git a/arch/x86_64/kernel/ptrace.c b/arch/x86_64/kernel/ptrace.c
--- a/arch/x86_64/kernel/ptrace.c
+++ b/arch/x86_64/kernel/ptrace.c
@@ -114,13 +114,13 @@ static int putreg(struct task_struct *ch
 			child->thread.es = value & 0xffff;
 			return 0;
 		case offsetof(struct user_regs_struct,fs_base):
-			if (!((value >> 48) == 0 || (value >> 48) == 0xffff))
-				return -EIO; 
+			if (value >= TASK_SIZE)
+				return -EIO;
 			child->thread.fs = value;
 			return 0;
 		case offsetof(struct user_regs_struct,gs_base):
-			if (!((value >> 48) == 0 || (value >> 48) == 0xffff))
-				return -EIO; 
+			if (value >= TASK_SIZE)
+				return -EIO;
 			child->thread.gs = value;
 			return 0;
 		case offsetof(struct user_regs_struct, eflags):
