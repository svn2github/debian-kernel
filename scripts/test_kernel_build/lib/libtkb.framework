#!/bin/bash
######################################################################
# Horms                                                   October 2004
######################################################################

if [ "$LIBTKB_FRAMEWORK" != "YES" ]; then
LIBTKB_FRAMEWORK="YES"

usage () 
{
	local NAME="$(basename $0)"

	cat 1>&2 << __EOF__
Usage: 
 linux-2.6: $NAME BRANCH [START_STAGE] [END_STAGE]
 otherwise: $NAME VERSION BRANCH [START_STAGE] [END_STAGE]

Where: 
 BRANCH is one of: sarge, stable, sarge-security, stable-security, etch, 
        testing, sid, unstable, experimental
 VERSION is one of: 2.6, 2.6.8, and 2.4.27
         2.6 is the new single source packaging
         2.6.8 and 2.4.27 is the old sarge-style packaging
 START_STAGE is a number >= 0 (default 0)
 END_STAGE   is a number >= START_STAGE (default 1000)

__EOF__

	exit 1
}

deb_version ()
{
	( cd $1; dpkg-parsechangelog | awk '/^Version: / { print $2 }'; )
}

deb_distribution ()
{
	( cd $1; dpkg-parsechangelog | awk '/^Distribution: / { print $2 }'; )
}

tag_version ()
{
	local PRISTINE_RELEASE=$(deb_version $1)
	if [ -n "$RELEASE" -o -z "$TAG_VERSION" ]; then
		echo "$PRISTINE_RELEASE"
		return
	fi
	local DISTRIBUTION=$(deb_distribution $1)
	local TAIL=${PRISTINE_RELEASE##*[a-z-]}
	local HEAD=${PRISTINE_RELEASE%%$TAIL}

	if [ "$DISTRIBUTION" != "UNRELEASED" -a -n "$TAIL" ]; then
		echo "${HEAD}${TAIL}.$TAG_VERSION"
	else
		echo "${HEAD}$(($TAIL - 1)).$TAG_VERSION"
	fi
}

upstream_version ()
{
	local PRISTINE_RELEASE=$(deb_version $1)
	echo ${PRISTINE_RELEASE%%-*}
}

declare KSC_TMP
kernel_symbol_check_clean ()
{
	rm -rf "$KSC_TMP";
}

kernel_symbol_check ()
{
	KSC_TMP="$(mktemp -d)"
	trap kernel_symbol_check_clean EXIT


	PKG1="$1"
	PKG2="$2"

	echo "Checking $PKG1 vs $PKG2"

	PKG1_FILE="${PKG1##*/}"
	PKG1_BASE="${PKG1_FILE%%_*}"

	PKG2_FILE="${PKG2##*/}"
	PKG2_BASE="${PKG2_FILE%%_*}"

	rm -rf "$KSC_TMP/1/" "$KSC_TMP/2/"
	mkdir "$KSC_TMP/1/" "$KSC_TMP/2/"
	dpkg -x "$PKG1" "$KSC_TMP/1/"
	dpkg -x "$PKG2" "$KSC_TMP/2/"

	if [ "$MAJOR_MINOR" = "2.4" ]; then
		find "$KSC_TMP/1/usr/src/$PKG1_BASE/include" \
			-name "*.ver" -type f | \
			xargs cat | sort > "$KSC_TMP/1.sym"
		find "$KSC_TMP/2/usr/src/$PKG2_BASE/include" \
			-name "*.ver" -type f | \
			xargs cat | sort > "$KSC_TMP/2.sym"
	else
		cat "$KSC_TMP/1/usr/src/$PKG1_BASE/Module.symvers" | \
			 sort > "$KSC_TMP/1.sym"
		cat "$KSC_TMP/1/usr/src/$PKG1_BASE/Module.symvers" | \
			 sort > "$KSC_TMP/2.sym"
	fi

	diff -u "$KSC_TMP/1.sym" "$KSC_TMP/2.sym" > "$KSC_TMP/sym.udiff" || true
	diff "$KSC_TMP/1.sym" "$KSC_TMP/2.sym" > "$KSC_TMP/sym.diff" || true
	cat "$KSC_TMP/sym.udiff"
	if grep "^-" "$KSC_TMP/sym.diff" > /dev/null; then
		echo 'Error: Symbol Changes, as above. Incompatible ABI!!!'
		STATUS=1
	elif [ -s "$KSC_TMP/sym.udiff" ]; then
		echo "Warning: Additions made to ABI"
		STATUS=2
	else
		echo "No Changes"
		STATUS=0
	fi

	kernel_symbol_check_clean
	trap EXIT
	return $STATUS
}

print_readme_html ()
{
	echo "Automated Builds for testing."
	echo "Use at your own risk."
	echo "apt-getable using:"
	echo "<pre>"
	echo "deb $1 ./"
	echo "deb-src $1 ./"
	echo "</pre>"
}

declare LOG LOG_BUF
log ()
{
	echo $@
	if [ -f "$LOG" ]; then
		echo "$LOG_BUF"$@ >> "$LOG"
		LOG_BUF=""
	else
		LOG_BUF="${LOG_BUF}$(echo $@)"
	fi
}

openlog ()
{
	echo "$LOG_BUF" > "$LOG"
	LOG_BUF=""
}

purgelog ()
{
	rm -f "$LOG"
}

pm_quit ()
{
	log ""
	
	echo "Status: $STAGE_STATUS"
	echo "Version: $VERSION ($BUILD_TYPE)"
	echo -n "Host: "
	hostname -s
	echo "Start: $START"
	echo -n "Finish: "
	date --rfc
	times

	if [ "$STAGE_STATUS" = failed ]; then
		echo "Stage: $STAGE: $STAGE_NAME..."
		[ -f "$LOG.$STAGE" ] && tail -100 "$LOG.$STAGE"
	fi
	
	{
	echo "Status: $STAGE_STATUS"
	echo "Version: $VERSION ($BUILD_TYPE)"
	echo -n "Host: "
	hostname -s
	echo "Start: $START"
	echo -n "Finish: "
	date --rfc
	times

	if [ "$STAGE_STATUS" = failed ]; then
		echo "Stage: $STAGE: $STAGE_NAME..."
		[ -f "$LOG.$STAGE" ] && cat "$LOG.$STAGE"
	else
		[ -f "$B_LOG" ] && tac "$B_LOG"
		[ -f "$S_LOG" ] && tac "$S_LOG"
	fi
	} | mail -s "Build: ($STAGE_STATUS: $VERSION: $(hostname -s))" $TO

}

declare STAGE_STATUS="failed"
stage_begin ()
{
	if [ $END_STAGE -eq $STAGE ]; then
		log "exiting on request"
		STAGE_STATUS="ok"
		exit 0
	fi

	STAGE=$(( $STAGE + 1 ))
	log -n "Stage $STAGE: $@... "

	if [ $STAGE -lt $START_STAGE -a -f "$DST_DIR/$STAGE.marker" ]; then
		log skipped
		return 0
	fi
	return 1
}

stage_end ()
{
	STATUS="$1"
	if [ $STATUS -ne 0 ]; then
		log "failed"
		cat "$LOG.$STAGE"
		exit 1
	fi
	touch "$DST_DIR/$STAGE.marker"
	log "ok!"
}

fi # LIBTKB_FRAMEWORK
