# origin: Debian (herbert)
# cset: n/a
# inclusion: not suitable for mainline (?)
# description: allow passing of hdX=stroke to enable stroke at runtime
# revision date: 2004-09-03

--- kernel-source-2.4.27-2.4.27/drivers/ide/ide.c~	2004-08-12 22:38:36.000000000 -0700
+++ kernel-source-2.4.27-2.4.27/drivers/ide/ide.c	2004-08-12 22:39:01.000000000 -0700
@@ -2089,6 +2089,7 @@
  * "hdx=scsi"		: the return of the ide-scsi flag, this is useful for
  *				allowwing ide-floppy, ide-tape, and ide-cdrom|writers
  *				to use ide-scsi emulation on a device specific option.
+ * "hdx=stroke"		: runtime version of CONFIG_IDEDISK_STROKE
  * "idebus=xx"		: inform IDE driver of VESA/PCI bus speed in MHz,
  *				where "xx" is between 20 and 66 inclusive,
  *				used when tuning chipset PIO modes.
@@ -2188,7 +2189,7 @@
 		const char *hd_words[] = {"none", "noprobe", "nowerr", "cdrom",
 				"serialize", "autotune", "noautotune",
 				"slow", "swapdata", "bswap", "flash",
-				"remap", "noremap", "scsi", NULL};
+				"remap", "noremap", "scsi", "stroke", NULL};
 		unit = s[2] - 'a';
 		hw   = unit / MAX_DRIVES;
 		unit = unit % MAX_DRIVES;
@@ -2254,6 +2255,9 @@
 			case -14: /* "scsi" */
 				drive->scsi = 1;
 				goto done;
+			case -15: /* "stroke" */
+				drive->stroke = 1;
+				goto done;
 			case 3: /* cyl,head,sect */
 				drive->media	= ide_disk;
 				drive->cyl	= drive->bios_cyl  = vals[0];
--- kernel-source-2.4.27-2.4.27/drivers/ide/ide-disk.c~	2004-08-12 22:36:07.000000000 -0700
+++ kernel-source-2.4.27-2.4.27/drivers/ide/ide-disk.c	2004-08-12 22:38:11.000000000 -0700
@@ -77,6 +77,12 @@
 
 static int driver_blocked;
 
+#ifdef CONFIG_IDEDISK_STROKE
+#define STROKE 1
+#else
+#define STROKE 0
+#endif
+
 static inline u32 idedisk_read_24 (ide_drive_t *drive)
 {
 #if 0
@@ -1063,7 +1069,6 @@
 	return addr;
 }
 
-#ifdef CONFIG_IDEDISK_STROKE
 /*
  * Sets maximum virtual LBA address of the drive.
  * Returns new maximum virtual LBA address (> 0) or 0 on failure.
@@ -1129,8 +1134,6 @@
 	return addr_set;
 }
 
-#endif /* CONFIG_IDEDISK_STROKE */
-
 static unsigned long long sectors_to_MB(unsigned long long n) {
 	n <<= 9;		/* make it bytes */
 	do_div(n, 1000000);	/* make it MB */
@@ -1153,14 +1156,15 @@
 			 drive->name,
 			 capacity, (capacity - capacity/625 + 974)/1950,
 			 set_max, (set_max - set_max/625 + 974)/1950);
-#ifdef CONFIG_IDEDISK_STROKE
-	set_max = idedisk_set_max_address(drive, set_max);
-	if (set_max) {
+	if (STROKE || drive->stroke)
+	{
+		set_max = idedisk_set_max_address(drive, set_max);
+		if (set_max) {
 		drive->id->lba_capacity = set_max;
-		printk(KERN_INFO "%s: Host Protected Area disabled.\n",
-				 drive->name);
+			printk(KERN_INFO "%s: Host Protected Area disabled.\n",
+					 drive->name);
+		}
 	}
-#endif /* CONFIG_IDEDISK_STROKE */
 }
 
 static inline void idedisk_check_hpa_lba48(ide_drive_t *drive)
@@ -1179,14 +1183,15 @@
 			 drive->name,
 			 capacity_2, sectors_to_MB(capacity_2),
 			 set_max_ext, sectors_to_MB(set_max_ext));
-#ifdef CONFIG_IDEDISK_STROKE
-	set_max_ext = idedisk_set_max_address_ext(drive, set_max_ext);
-	if (set_max_ext) {
-		drive->id->lba_capacity_2 = set_max_ext;
-		printk(KERN_INFO "%s: Host Protected Area disabled.\n",
-				 drive->name);
+	if (STROKE || drive->stroke)
+	{
+		set_max_ext = idedisk_set_max_address_ext(drive, set_max_ext);
+		if (set_max_ext) {
+			drive->id->lba_capacity_2 = set_max_ext;
+			printk(KERN_INFO "%s: Host Protected Area disabled.\n",
+					 drive->name);
+		}
 	}
-#endif /* CONFIG_IDEDISK_STROKE */
 }
 
 /*
--- kernel-source-2.4.27-2.4.27/include/linux/ide.h~	2004-08-12 22:38:42.000000000 -0700
+++ kernel-source-2.4.27-2.4.27/include/linux/ide.h	2004-08-12 22:39:01.000000000 -0700
@@ -747,6 +747,7 @@
 	unsigned ata_flash	: 1;	/* 1=present, 0=default */
 	unsigned dead		: 1;	/* 1=dead, no new attachments */
 	unsigned id_read	: 1;	/* 1=id read from disk 0 = synthetic */
+	unsigned stroke		: 1;	/* from:  hdx=stroke */
 	unsigned addressing;		/*      : 3;
 					 *  0=28-bit
 					 *  1=48-bit
