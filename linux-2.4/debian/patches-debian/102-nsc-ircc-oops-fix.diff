# origin: mbroemme (BitKeeper)
# cset: 1.1449.1.55 (2.4) key=4129d428jBa-HsJVI29uI4OLhE7uRA
# inclusion: upstream
# description: [PATCH] Fix kernel oops in nsc-ircc.c
# revision date: Fri, 26 Nov 2004 14:59:38 +0900
#
# S rset: ChangeSet|1.1449.1.54..1.1449.1.55
# I rset: drivers/net/irda/nsc-ircc.c|1.15..1.16
#
# This is a BitKeeper generated diff -Nru style patch.
#
# ChangeSet
#   2004/08/23 08:25:28-03:00 mbroemme@plusserver.de 
#   [PATCH] Fix kernel oops in nsc-ircc.c
#   
#   * fix kernel oops if you load nsc-ircc.o with dongle id which is out of range
#     of available dongle ids.
#   
#   If you try to modprobe the nsc-ircc module with a specific dongle id for
#   example: "modprobe nsc-ircc irq=3 dma=1 io=0x2f8 dongle_id=0x99" the kernel
#   oopses and the module hangs until a reboot on initializing.
# 
# drivers/net/irda/nsc-ircc.c
#   2004/08/23 08:19:52-03:00 mbroemme@plusserver.de +12 -5
#   Fix kernel oops in nsc-ircc.c
# 
#
===== drivers/net/irda/nsc-ircc.c 1.15 vs 1.16 =====
--- 1.15/drivers/net/irda/nsc-ircc.c	2004-01-15 03:21:16 +09:00
+++ 1.16/drivers/net/irda/nsc-ircc.c	2004-08-23 20:19:52 +09:00
@@ -6,8 +6,8 @@
  * Status:        Stable.
  * Author:        Dag Brattli <dagb@cs.uit.no>
  * Created at:    Sat Nov  7 21:43:15 1998
- * Modified at:   Wed Mar  1 11:29:34 2000
- * Modified by:   Dag Brattli <dagb@cs.uit.no>
+ * Modified at:   Sat Aug 14 04:14:57 2004
+ * Modified by:   Maik Broemme <mbroemme@plusserver.de>
  * 
  *     Copyright (c) 1998-2000 Dag Brattli <dagb@cs.uit.no>
  *     Copyright (c) 1998 Lichen Wang, <lwang@actisys.com>
@@ -369,15 +369,22 @@
 	}
 	MESSAGE("IrDA: Registered device %s\n", dev->name);
 
-	/* Check if user has supplied the dongle id or not */
+	/* Check if user has supplied the dongle id and if it is in the range of available ids or not. */
 	if (!dongle_id) {
 		dongle_id = nsc_ircc_read_dongle_id(self->io.fir_base);
 		
 		MESSAGE("%s, Found dongle: %s\n", driver_name,
 			dongle_types[dongle_id]);
 	} else {
-		MESSAGE("%s, Using dongle: %s\n", driver_name,
-			dongle_types[dongle_id]);
+		if (dongle_id < sizeof(dongle_types) / sizeof(dongle_types[0])) {
+			MESSAGE("%s, Using dongle: %s\n", driver_name,
+				dongle_types[dongle_id]);
+		} else {
+			MESSAGE("%s, dongle id %i out of range, start autodetect.\n", driver_name, dongle_id);
+			dongle_id = nsc_ircc_read_dongle_id(self->io.fir_base);
+			MESSAGE("%s, Found dongle: %s\n", driver_name,
+				dongle_types[dongle_id]);
+		}
 	}
 	
 	self->io.dongle_id = dongle_id;
