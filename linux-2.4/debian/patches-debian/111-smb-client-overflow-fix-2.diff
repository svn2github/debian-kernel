# origin: s.esser (BitKeeper)
# cset: 1.1498 (2.4) key=4194c993lBH6Oz19XYGdw8VtR9Du-g
# inclusion: upstream
# description: [PATCH] Improved smbfs client overflow fix
# revision date: Fri, 26 Nov 2004 14:59:39 +0900
#
# S rset: ChangeSet|1.1497..1.1498
# I rset: fs/smbfs/proc.c|1.17..1.18
# I rset: fs/smbfs/sock.c|1.6..1.7
#
# This is a BitKeeper generated diff -Nru style patch.
#
# fs/smbfs/proc.c
#   2004/11/12 14:34:21-02:00 s.esser@e-matters.de +8 -8
#   Improved smbfs client overflow fix
# 
# fs/smbfs/sock.c
#   2004/11/12 14:26:04-02:00 s.esser@e-matters.de +14 -1
#   Improved smbfs client overflow fix
# 
# ChangeSet
#   2004/11/12 12:32:51-02:00 s.esser@e-matters.de 
#   [PATCH] Improved smbfs client overflow fix
#   
#   the patches in v2.4.28-rc2 are incomplete. They do not fix
#   any of the possible leaks.
# 
#
===== fs/smbfs/proc.c 1.17 vs 1.18 =====
--- 1.17/fs/smbfs/proc.c	2004-09-27 04:04:22 +09:00
+++ 1.18/fs/smbfs/proc.c	2004-11-13 01:34:21 +09:00
@@ -1290,11 +1290,11 @@
 
 	/* we can NOT simply trust the data_len given by the server ... */
 	if (data_len > count ||
-	    data_len > server->packet_size - (buf+3 - server->packet)) {
-		printk(KERN_ERR "smb_proc_read: invalid data length!! "
-		       "%d > %d || %d > %d - (%p - %p)\n",
+		(buf+3 - server->packet) + data_len > server->packet_size) {
+		printk(KERN_ERR "smb_proc_read: invalid data length/offset!! "
+		       "%d > %d || (%p - %p) + %d > %d\n",
 		       data_len, count,
-		       data_len, server->packet_size, buf+3, server->packet);
+		       buf+3, server->packet, data_len, server->packet_size);
 		result = -EIO;
 		goto out;
 	}
@@ -1381,11 +1381,11 @@
 
 	/* we can NOT simply trust the info given by the server ... */
 	if (data_len > count ||
-	    data_len > server->packet_size - (buf - server->packet)) {
-		printk(KERN_ERR "smb_proc_read: invalid data length!! "
-		       "%d > %d || %d > %d - (%p - %p)\n",
+		(buf - server->packet) + data_len > server->packet_size) {
+		printk(KERN_ERR "smb_proc_readX: invalid data length/offset!! "
+		       "%d > %d || (%p - %p) + %d > %d\n",
 		       data_len, count,
-		       data_len, server->packet_size, buf, server->packet);
+		       buf, server->packet, data_len, server->packet_size);
 		result = -EIO;
 		goto out;
 	}
===== fs/smbfs/sock.c 1.6 vs 1.7 =====
--- 1.6/fs/smbfs/sock.c	2004-09-27 03:42:36 +09:00
+++ 1.7/fs/smbfs/sock.c	2004-11-13 01:26:04 +09:00
@@ -571,7 +571,11 @@
 					parm_disp, parm_offset, parm_count,
 					data_disp, data_offset, data_count);
 				*parm  = base + parm_offset;
+				if (*parm - inbuf + parm_tot > server->packet_size)
+					goto out_bad_parm;
 				*data  = base + data_offset;
+				if (*data - inbuf + data_tot > server->packet_size)
+					goto out_bad_data;
 				goto success;
 			}
 
@@ -591,6 +595,8 @@
 			rcv_buf = smb_vmalloc(buf_len);
 			if (!rcv_buf)
 				goto out_no_mem;
+			memset(rcv_buf, 0, buf_len);
+			
 			*parm = rcv_buf;
 			*data = rcv_buf + total_p;
 		} else if (data_tot > total_d || parm_tot > total_p)
@@ -598,8 +604,12 @@
 
 		if (parm_disp + parm_count > total_p)
 			goto out_bad_parm;
+		if (parm_offset + parm_count > server->packet_size)	
+			goto out_bad_parm;
 		if (data_disp + data_count > total_d)
 			goto out_bad_data;
+		if (data_offset + data_count > server->packet_size)	
+			goto out_bad_data;
 		memcpy(*parm + parm_disp, base + parm_offset, parm_count);
 		memcpy(*data + data_disp, base + data_offset, data_count);
 
@@ -610,8 +620,11 @@
 		 * Check whether we've received all of the data. Note that
 		 * we use the packet totals -- total lengths might shrink!
 		 */
-		if (data_len >= data_tot && parm_len >= parm_tot)
+		if (data_len >= data_tot && parm_len >= parm_tot) {
+			data_len = data_tot;
+			parm_len = parm_tot;
 			break;
+		}
 	}
 
 	/*
